- react 웹라이브러리를 써야 하는 이유
 : DOM객체를 통해서, JS가 HTML을 인식하고 동적으로 변경가능하게 해주었던 JQuery의 비효율성 때문
    -> 기본적으로 jQuery는 JS가 HTML을 직접 조작하는 DOM API를 단순히 쓰기만 쉽게 조정한 결과물
        (= 비유하자면, 전문가용 맥가이버 칼을 일반인도 다루기 쉬울 정도로 마개조한 상태...)
            -> 그럼에도 react 라이브러리가 등장하기 전까지는... ㅈㄴ게 편하다는 장점이 있어 angular 프레임워크에 이르기까지 널리 사용되었음..

- react 구동법 정리
1. node js를 설치함
   -> npm(node package manager)를 이용해서 편하게 react 라이브러리를 이용한 프로젝트를 초기화 하기 위해서 위해서 반드시 필요함

2. (mac, window 둘 다 해당)원하는 폴더를 생성한 뒤, 해당 폴더에서 터미널을 연다..
   -> cmd를 쓰던, powershell을 쓰건, VSCODE를 쓰던 걍 해당 폴더에 터미널을 통해 접근해서 다음 명령어를 실행할 준비를 하면 됨

3. 'npx create-react-app 프로젝트명' 이란 명령어를 입력하면, 알아서 해당 위치에서 초기화 상태의 react 라이브러리 front-end bulid 파이프라인 파일을 다운로드함 
   ->  (npm 5.2+ 이후) 패키지 실행 도구 명령어 npm -> npx

4. 'npm start' 란 명령어를 입력하면, 해당 상태의 react 라이브러리를 사용한 front-end 스크립트를 '로컬' 서버에서 live 상태로 실행함
   -> 이는 react 라이브러리에서 npm 명령어를 사전에 설정했기 때문..
      (= 자세히 알고 싶으면, nodeJS의 npm 명령어를 파야함)

5. App.js 파일에서 Component 내용을 바꾸는 걸로 시작하면 됨
   -> index.js에서 해당 App.js를 모듈 형식으로 가져와서, Rendering 할 component로 설정한 상태
      (= 앞으로 컴포넌트를 제작하면 이런식으로 모듈로 만들어 가져오고, component 형식으로 root.Render 함수의 return 값에 붙이면 그만)

      # html을 작성하지 않고, js로 코딩해도 html이 작동하는 이유?
        : component 형식부터 rendering의 인터페이스 화를 구현한 react 라이브러리에 그것이 가능하게 코딩이 되어있고 프로그래머가 이를 끌어들여 해당 기능을 사용하기 때문
          (= API라는거 자체가 사용하는 쪽은 그냥 공급자가 명시하는 형식만 지켜서 쓰면 되고, 내부구조는 몰라도 되는 것을 의미함)


