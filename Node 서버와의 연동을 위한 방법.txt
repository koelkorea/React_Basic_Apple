- 서버(server)
   : 누가 어떤 데이터를 요청하면 보내주는 역할을 수행하는 프로그램 
      -> 그 프로그램을 수행하는 실체가 물리적 컴퓨터일수도 있고, 논리적으로 분리된 가상 컴퓨터일수도 있음

- 웹서버
   : 누가 어떤 홈페이지 도메인(URL)으로 접속하면 거기맞는 html을 보내주는 프로그램을 의미
       -> REACT로 만든 웹페이지라도 마찬가지로 웹서버와 연동하면, 리액트로 만든 html 파일을 보내주게 됨

- Nodejs
   : 쉽게 말해, JS로 확장성 있는 네트워크 애플리케이션 백엔드를 구축할 수 있게 만들어주는 일종의 소프트웨어 플랫폼
     (= JS의 특유의 이벤트 루프와 Non blocking I/O와 같은 특징들을 그대로 서버에 활용할 수 있음)

    # Express 프레임워크
       : 웹이나 모바일 환경 기반 애플리케이션을 위한 Node.js 기반 웹 애플리케이션 프레임워크
          -> 프레임워크인 이유?
              : 사용법이 까다롭고 딱딱하나, 이 녀석이 시키는데로 하면 쉽고 빠르고 간편하게 사용자가 원하는데로 서버 환경 커스터마이징이 가능함

    # Nodejs + Express로 서버 구축하는법
      1. nodejs 설치
      2. 작업폴더만들고 에디터로 오픈
      3. server.js 파일을 프로젝트 가장 바깥쪽에 생성 후, 아래 코드 작성하여 express 프레임워크를 모듈로 불러온 뒤, 
          -> 서버 세팅과 구동을 위한 보일러플레이트 코드(Boilerplate code) 작성

             const express = require('express');
             const path = require('path');
             const app = express();
             
             app.listen(8080, function () {
               console.log('listening on 8080')
             }); 

      4. 터미널에 npm init -y 입력 = node 서버 초기화 작업
      5. 터미널에 npm install express 이것도 입력 = express 프레임워크 설치
      6. 터미널에 nodemon server.js(없으면 node server.js)를 입력 = 서버 미리보기 띄우기

 
    # Nodejs + Express With React 라이브러리
      1. nodejs 설치
      2. 터미널에 npx create-react-app 프로젝트명 입력 후, 에디터로 오픈하여 개발
      3. (개발 완료 후) 터미널에 npm run build 입력 : 리액트 완성본 index.html(SPA), css, js 파일이 build 폴더내에 생성
      4. 그 html 파일을 API요청을 받을때 서버에서 유저에게 보내주면 끝
         (= 사실 react-router-dom을 설치하여 react 안의 코드로도 라우팅 가능하기에, 굳이 서버가 이 역할을 반드시 수행할 필요는 없음)

          - server.js에 보내고 싶은 파일의 위치를 'JS명.use()' API로 다음과 같이 추가 + 'JS명.HTML메서드()'를 통해 서베에서 요청이 들어오면 보내주는 것도 가능
             (= ex. /list 로 접속하면 글목록 보여주고 /mypage 접속하면 마이페이지도 보여줌)

             ex) app.use(express.static(path.join(__dirname, 'react-project/build')));
                 app.get('/', function (요청, 응답) {
                   응답.sendFile(path.join(__dirname, '/react-project/build/index.html'));
                 });

          - 서버가 API요청을 통해 모든 페이지 라우팅을 담당하게 하고 싶다면, 그에 해당하는 코드를 server.js에 가장 하단에 입력함
            (= 사실상 react 라우터에서 주어진 url 외의 모든 형식에 해당하는 요청에 답하라는 그 코드와 같음)
                -> 고객이 URL란에 아무거나 입력하면 걍 리액트 프로젝트나 보내달라는 의미 
                   (= 별표 * 라는 것은 모든 문자라는 뜻)

             ex) app.get('*', function (요청, 응답) {
                   응답.sendFile(path.join(__dirname, '/react-project/build/index.html'));   =   <Route path = "*" element = { <div> 404! 없는 페이지 </div> } />
                 });

          - (참고) express.static이라는걸 쓰시면 특정 폴더안의 파일들을 static 파일로 고객들에게 잘 보내줄 수 있음








 

 

Q. 리액트에서 DB데이터 보여주고 싶으면? 

 

예를 들어서 DB에서 글목록 데이터를 꺼내서 HTML로 보여주고 싶은 경우

server-side rendering / client-side rendering 둘 중 하나 선택하면 됩니다. 

 

server-side rendering은 html을 서버가 만들어서 보내주는 겁니다. 

nodejs 강의처럼

1. DB에서 데이터 뽑아서

2. 글목록.html 파일에 꽂아넣고

3. 그 html 파일을 서버에서 보내주는 것임 

 

client-side rendering은 html을 리액트가 브라우저안에서 만드는 겁니다.

1. 리액트가 서버에 GET요청으로 DB데이터를 가져와서

2. 그걸 html로 만들어서 보여주는 것임 

 

 

리액트를 쓰는 경우 보통 client-side rendering을 합니다.

그래서 DB에 있는 상품목록을 가져와서 리액트에서 보여주고 싶으면 

이런 식으로 코드를 짭니다. 

1. 서버는 누군가 /product로 GET요청을 하면 DB에서 데이터 꺼내서 보내주라고 API를 짜놓습니다. 

2. 리액트는 상품목록을 보여주고 싶을 때 서버 /product 주소로 GET요청 날리면 됩니다.

3. 그럼 데이터 받아오겠죠? 그걸 가지고 html에 집어넣든 맘대로 개발하면 됩니다. 

 

그래서 리액트는 서버와의 통신은 거의 ajax로 진행합니다.

POST요청, 로그인해서 세션만들기 이런것도 ajax로 잘됩니다. 

 

 

근데 nodejs 서버파일 상단엔

app.use(express.json());
var cors = require('cors');
app.use(cors());
이 코드 넣고 시작하셔야 리액트와 nodejs 서버간 ajax 요청 잘됩니다. 

이거 쓰려면 서버프로젝트 터미널에서 npm install cors 설치해야합니다. 

express.json() 은 유저가 보낸 array/object 데이터를 출력해보기 위해 필요하고

cors는 다른 도메인주소끼리 ajax 요청 주고받을 때 필요합니다. 

 

 

 

 

 

 

 

 

 

 

Q. 리액트프로젝트 코드 수정할 때 마다 build 작업을 해야하나요? 

 

그럴 필요 없습니다.

그건 나중에 사이트를 aws, google cloud 이런 곳에 발행할 때만 한 번 해주면 됩니다. 

평소에 개발할 땐 

리액트도 localhost로 미리보기 띄워놓고, 서버도 localhost로 미리보기를 띄워두고 개발 진행하면 별 문제 없습니다.

 

- 다만 리액트 -> 서버 ajax 요청시 /product 이렇게 말고 http://서버주소/product 잘 입력하고

- 서버에 cors 옵션 잘 켜놓으면 됩니다. 

 

 

서버주소 입력하는게 귀찮으면  

리액트에서 package.json이라는 파일을 열어서 proxy라는 부분 설정을

서버 미리보기 띄우던 localhost:어쩌구 주소로 설정해주면 됩니다. 

그러면 리액트에서 ajax 요청 대충해도 localhost:어쩌구 주소로 ajax 요청을 알아서 보내줍니다. 

https://create-react-app.dev/docs/proxying-api-requests-in-development/

이걸 참고합시다. 

 

 

 

 

 

 

 

서브디렉토리에 리액트앱 발행하고 싶은 경우 

 

지금 메인페이지가 리액트앱인데 그거 말고

/react 이렇게 접속하면 리액트로 만든 html

/ 이렇게 접속하면 public 폴더에 있던 그냥 main.html

보여주고 싶은 경우 어떻게 하냐면 

 

(server.js)

app.use( '/', express.static( path.join(__dirname, 'public') ))
app.use( '/react', express.static( path.join(__dirname, 'react-project/build') ))

app.get('/', function(요청,응답){
  응답.sendFile( path.join(__dirname, 'public/main.html') )
}) 
app.get('/react', function(요청,응답){
  응답.sendFile( path.join(__dirname, 'react-project/build/index.html') )
})
▲ server.js 라우팅을 이렇게 바꿔주고 

 

 

(리액트프로젝트 내의 package.json)
{
  "homepage": "/react",
  "version": "0.1.0",
  ... 등
} 
▲ 리액트 프로젝트 내의 package.json에 homepage라는 항목을

여러분이 발행을 원하는 서브디렉토리명으로 새로 기입해주면 됩니다. 

그럼 방금 server.js 에서 /react 접속시 리액트 프로젝트보내고 

/ 접속시 일반 html 파일 보내라고 했으니 정말 그렇게 됩니다. 

딱히 쓸 일은 별로 없습니다. 

 

 

 

 

이전다음 강의