- 외부 react 라이브러리 
 : react 라이브러리를 통한 개발을 쉽게 하기 위한, 외부의 개발자가 개발한 라이브러리들.. 
    -> 원하는 기능들의 구현을 더 쉬운 패턴으로 가능하게 하는 기능이나 함수등이 추가됨

      # (중요) 어떤 라이브러리를 쓰고 싶으면, 그냥 검색해서 나오는 튜토리얼 or get started를 보면 대충 친절하게 설명되어 있음
          -> 명령어가 바뀌는 경우도 있으니, 안 된다 싶으면 설치 명령어는 다시 확인해볼 것을 추천함 


- 외부 react 라이브러리 리스트 및 사용법

 1. react-bootstrap
     : (UI 복붙하는 식으로) react의 component를 만들기 귀찮을때, 사전 제작된 component를 쉽게 가져다 쓰기 위한 목적으로 제작된, react 전용 외부 라이브러리
        -> 단! 이미 만들어져 있는 스타일은 그대로 다양한 웹페이지의 디자인에 적용하기에는.. 미적으로 굉장히 호환성이 떨어지는 경우가 많고 경우의 수가 적음
        -> 또한! 복붙한 component는 또 variant라는 bootstrap에만 통용되는 전용 속성에 근거하고 미리 적용된 스타일이라, 어차피 원하는데로 쓸거면 또 CSS에 스타일링을 적용해야 함
           (= 유연성도 ㅈ같고, 사실상 현업에서 쓰는 건 취향에 가까운 영역)

      # react-bootstrap 설치법
        1) 설치 명령어
           : (node js가 깔려 있어야함) 터미널 열고 프로젝트 폴더에서 npm install react-bootstrap bootstrap 입력 
               -> react-bootstrap, bootstrap 을 다 깔아야 한다는 거 잊지 말아야 함

        2) 특정 스타일을 기입시, 오류 발생에 대비해서 react-bootstrap 실행에 필요한 style 전부 모여있는 Bootstrap CSS을 연결시킴
            -> (방법1) index.html 파일의 <head> 태그 안에 <link> 태그로 되어 있는 다음의 Bootstrap CSS를 끼워서 넣음

                ex) <link
                      rel="stylesheet"
                      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
                      integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
                      crossorigin="anonymous" />

            -> (방법2) index.js or App.js 파일에 다음의 Bootstrap CSS에 해당하는 모듈명을 입력함

                ex) import 'bootstrap/dist/css/bootstrap.min.css';

      # react-bootstrap 사용법
        1) 원하는 html 요소명에 해당하는 component를 import하는 명령어를 원하는 component 상단에 입력해줌

           ex) import Button from 'react-bootstrap/Button';
               import { Button } from 'react-bootstrap';

        2) 홈페이지의 검색어에 원하는 html 요소명을 입력 후 검색

           ex) button, input, nav, responsive grid(반응형으로 움직이는 grid를 짤 때 사용하면 유용) ...

        3) 검색어에 해당하는 html 요소들에 대한 스타일링 예제들의 미리보기와 해당하는 소스코드가 존재할텐데, 원하는 소스코드를 복사해서 붙여넣자
            -> 단순한 button 스타일링부터, state를 사용하여 동적인 UI까지 구현한 경우까지 꽤 다양함


 2. react-router-dom
     : react를 이용한 웹페이지에서 새로고침을 통한 전체 html요소를 가져오지 않고 virtual dom을 통해 필요한 html요소만 가져와서 routing 기능을 쉽게 구현하게 하는 react 전용 외부 라이브러리
       (= react-router가 없어도, routing 기능을 구현할 수는 있음)

      # routing 기능?
         : 웹 애플리케이션에서 다른 페이지 간의 이동과 주소(url) 관리를 사용자가 요청한 URL을 구분점으로 삼아 가능하게 해주는 기능
           (= 사용자가 요청하는 URL을 기반으로 웹 애플리케이션의 특정 페이지를 rendering 할 수 있도록 하는 일종의 표식시스템이라 생각하자)

            - 일반적 html, js를 통한 routing 기능 구현과정
               1) 새로운 html을 만듦
               2) a태그나 아니면, 여타 프레임워크의 패턴에 따른 방식으로 url을 요청하면, 1)에서 제작한 html을 내보냄

            - react를 통한 routing 기능 구현과정
               1) component를 생성하고, 만든 component들을 블록쌓듯 부모 component를 구현하는데 사용함
                   -> (중요) react에서 화면을 렌더링하는 방식은 html은 index.html 1개만 사용하고, 거기에 component 호출이 달라질 때마다 새로운 component를 갱신하는 방식으로 이뤄지게 때문
               2) 여타 프레임워크나 react-router-dom과 같은 라이브러리를 통해 패턴에 따른 방식으로 url을 요청하면, 1)에서 제작한 component를 내보냄


      # API (Application Programming Interface)
         : 웹 애플리케이션과 외부 서비스 또는 다른 애플리케이션 간의 통신을 위한 인터페이스를 의미
           (= 서로 다른 시스템과의 데이터를 통한 상호작용을 가능하게 한다는 것이 핵심 개념)


      # routing 기능 VS API (Application Programming Interface)
         1) request와 return의 대상이 내부인가(routing) or 외부인가(API) 여부가 다름의 핵심
         2) 무엇을 받아오기 위한 통신인가?
             -> routing : 같은 웹페이지에서의 다른 페이지
             -> API     : 다른 시스템에서 보내주는 데이터


      # react에서 html의 a태그를 쓰지 않는 이유?
         : a태그는 새로고침을 통해, 무조건 해당 페이지의 전체 html 요소를 로딩함
           (= react의 virtual dom을 통한 필요한 html 요소만을 서버로부터 받아오고 로딩하여 효율적인 rendering을 하는 메카니즘과 기능 구현에 react는 맞지 않음)


      # react-router-dom 설치 명령어
         : (node js가 깔려 있어야함) 터미널 열고 프로젝트 폴더에서 npm install react-router-dom@6(원하는 라이브러리 버전) 입력 


      # react-router-dom 사용법
        1) BrowserRouter component를 통한, router 기능을 적용할 component 범위 정하기

           a. react-router-dom 라이브러리의 BrowserRouter component에 해당하는 부분을 ES module 방식으로 불러와서, import하는 명령어를 원하는 component 상단에 입력해 줌
              -> 이를 통해 BrowserRouter 컴포넌트를 JSX 코드 내에서 사용할 수 있게 됨    

                  ex) import { BrowserRouter } from 'react-router-dom';
           
           b. conponent 파일(jsx)에서 rouing 기능이 필요한 component영역에 <BrowserRouter></BrowserRouter> 라는 component를 호출하고, 그 안에서 routing 기능 구현코드를 짜면 됨           

        2) router 기능을 적용할 component 내부에 router 코드 구현하기

           a. react-router-dom 라이브러리의 Routes, Route, Link component에 해당하는 부분을 ES module 방식으로 불러와서, import하는 명령어를 원하는 component 상단에 입력해 줌
              -> 이를 통해 Routes, Route, Link 컴포넌트를 JSX 코드 내에서 사용할 수 있게 됨      

                  ex) import { Routes, Route, Link } from 'react-router-dom';

           b. <BrowserRouter></BrowserRouter> 안의 component 중에 routing 기능이 필요한 component를 골라서, 
               -> url 조건 에 따라 다른 내용의 component를 출력할 위치에 <Routes>와 <Route>를 통해 조건부로 다르게 rendering 될 html 내용을 구성하고
               -> 해당 url에 접근하게 해줄 하이퍼링크 역할을 수행하는 <Link>를 통해, 버튼을 클릭하면 url주소를 매개로 원하는 부분의 Route와 연결되어 원하는 component 내용을 rendering 하도록 함

                  ex) const root = ReactDOM.createRoot(document.getElementById('root'));
                      root.render(
                        <React.StrictMode>
                          <BrowserRouter>
                          <example />
                          </BrowserRouter>
                        </React.StrictMode>
                      );           
                  
                      funtion example(){

                        return(
                            <Link to = "/">홈</Link>
                            <Link to = "/detail">상세페이지</Link>

                            <Routes>
                              <Route path = "/" element = { 
                                <>
                                  <div className="main-bg"></div>
                                  <Container>
                                    <Row> </Row>
                                  </Container>
                                </>
                              }/>
                              <Route path = "/detail" element = { <div>상세 페이지임</div> }/>
                            </Routes>
                        )
                      }


      # Nested Route(중첩 라우트) 사용법
         : React Route 라이브러리에서 어떤 Route component의 url과 중복된 내용을 가진 다른 Route component를 부모-자식 관계로 정의함으로서, 계층적으로 중첩된 route를 선언하는 구성 
            -> 이를 통해 페이지를 더 작은 단위로 나누어 관리하기가 직관적이고, 코드의 재사용성과 유지보수성 또한 향상되는 효과를 가져옴

           1. 메인 Route가 될 상위 Route component를 정하고, 하위 Route component가 될 녀석들을 상위 component 안에 넣음

               ex) <Route path = "/about" element = { <About /> } >                        <Route path = "/about" element = { <About /> } />
                     <Route path = "member" element = { <div>멤버</div> } />                <Route path = "/about/member" element = { <div>멤버</div> } />
                     <Route path = "location" element = { <div>위치</div> } />       =>     <Route path = "/about/location" element = { <div>위치</div> } /> 
                   </Route>
           
           2. 상위 Route component의 내용(component 함수 자신의 return 내용이나, element 속성값이던 상관없음)에 하위 Route component의 내용이 rendering되길 원하는 위치에 <Outlet />을 기입함
              (= 이를 통해 Nested Route에 해당하는 url이 요청되면, 상위 Route component의 내용을 먼저 rendering 한 후 하위 Route component의 내용이 알맞게 배치되고 rendering 됨)
                  -> (중요!) 이는 1번의 과정에서 정해진 Nested Route 방식으로 Route 구성을 하지 않었더라도, 똑같이 작동됨

                      ex) function About(){
                            return(

                              <div>                                                         <Route path = "/about" element = { <div>
                                <h4>회사정보</h4>                                    =>                                           <h4>회사정보</h4> 
                                <Outlet></Outlet>                                                                                <Outlet></Outlet>
                              </div>                                                                                           </div> } />
                                                                                            
                            )
                          }


      # react-router-dom 의 component 및 속성 설명

         1) BrowserRouter
             : react-router를 통해 브라우저의 URL을 기반으로 페이지를 라우팅하는 기능을 사용할 component들의 범위를 정하는 component로.. 이 component 영역 안에 없는 component는 react-router 라이브러리 사용불가
                (= react-router-dom의 다른 component와는 상위 component로서 이들이 활동할 수 있는 영역을 정해주는 역할을 함)

         2) Routes
              : 해당 component에서 웹페이지의 다른 개별 페이지들의 url 정보를 담는 path 속성과 내용에 대한 element라는 속성을 가지고 있는 Route라는 component들을 navigation처럼 묶어줘서 관리하는 일종의 container역할을 하는 component
                (= Route component와는 상위 component로서 이들을 묶는 역할을 함)

         3) Route
              : 해당 웹페이지 내부의 다른 개별 페이지들의 정보를 담고 있는 component 
                (= Routes component의 하위 component로서 Routes의 item역할을 수행)

                 - path 속성
                    : url 정보를 가지는 속성
                       -> path = "*" 의 의미는 요청된 url이 다른 Route component에서 선언한 url이 아닌 모든 경우를 통칭하는 의미
                          (= 그렇기에 보통 예외나 오류 페이지를 구성하는데 사용하기도 함)

                 - element 
                    : 해당 내부 페이지가 가지는 component 정보
         4) Link  
              : react-router-dom 라이브러리에서 일종의 a태그와 비슷한 역할을 하는 component
                 -> 그렇다고, 화면 rendering 방식까지 무조건 새로고침식으로 다시 로딩하는 a태그랑은 다름

                 - to : 해당 Link component를 클릭 시, 연결되어야 하는 Route component의 url정보를 가지는 속성


         ex) const root = ReactDOM.createRoot(document.getElementById('root'));
             root.render(
               <React.StrictMode>

                 <BrowserRouter>

                   <div>
                   
                     <Link to = "/">홈</Link>
                     <Link to = "/detail">상세페이지</Link>

                     <Routes>
                       <Route path = "/"       element = { <div>메인 페이지임</div> }/>
                       <Route path = "/detail" element = { <div>상세 페이지임</div> }/>
                     </Routes>

                   </div>

                 </BrowserRouter>

               </React.StrictMode>
             );           
                  

      # react-router-dom 의 react hooks 메서드 설명

         1) useNavigate() 함수
             : Link component와 유사하면서도, 확장기능을 수행하는 react router에 존재하는 react hooks 함수의 일종
                -> Link component와의 차이점
                    : Link는 그 자체가 하나의 html 요소가 되는 component로서 실체가 존재 <-> useNavigate() 함수는 parameter가 주어지는데로 기능을 수행하는 함수이기에 이벤트핸들러를 통해 사용됨

               - useNavigate 문법
                  1. useNavigate('url주소')
                      : <Link to = "url주소" /> 와 유사

                         ex) <div onClick={ () => navigate('/detail') }>Home</div>

                  2. useNavigate(+ or -)
                     : +는 횟수만큼 브라우저의 앞페이지로 돌아가기, -는 횟수만큼 브라우저의 뒤로가기 실행과 같음
   
                        ex) <div onClick={ () => navigate(1) }>forward</div>
   

         2) useParam() 함수
             : Route component의 path 속성값에 들어간 url 파라미터가 존재하고 전달될 때, 해당 Route의 component로서 구성되는 component가 그 전달된 url 파라미터 값을 전달받고 사용할 수 있게 해주는 react router에 존재하는 react hooks 함수의 일종
               (= useParam()은 존재부터가 Route component의 path속성값에 url 파라미터가 존재해야 한다는 전제가 깔림)


               - useParam 사용법
                  1. 원하는 Route component의 path 속성값에 ':url파라미터명'을 포함하여 입력해 줌
                      -> (참고) ':url파라미터명' 은 <Route path = "/detail/:id/:age/:ss" /> 와 같이 여러개를 넣어도 상관은 없음

                          ex) <Route path = "/detail/:id" element = { <Detail shoes={shoes} /> } />

                  2. 해당 Route의 element를 구성하는 component가 존재하는 jsx 파일에 react-router-dom 라이브러리의 useParams에 해당하는 부분을 ES module 방식으로 불러와서, import하는 명령어를 원하는 component 상단에 입력해 줌
                      -> 이를 통해 useParams 컴포넌트를 JSX 코드 내에서 사용할 수 있게 됨      

                          ex) import { useParams } from 'react-router-dom';


                  3. 해당 Route의 element를 구성하는 component에 useParam() 함수를 통해 url 파라미터 값을 받을 수 있도록 변수를 선언하고, 그 변수를 component 구성에 사용함 
   
                        ex) function Detail(props){

                              let {id} = useParams();
                              let findShoes = props.shoes.find( (wantShoes) => wantShoes.id == id );

                              return (
                                    <div className="container">
                                      <h4 className="pt-5">{findShoes.title}</h4>
                                      <p>{findShoes.content}</p>
                                      <p>{findShoes.price}원</p>
                                    </div> 
                                );
                            }


 3. styled-components
     : React를 기반으로 하기에 component의 기준 단위로 스타일을 CSS-in-JS 방식으로 작동하는 styled API를 통해서, component의 style을 관리하는 라이브러리
       (= CSS-in-JS 방식을 쓴다는 점에서, 해당 라이브러리의 Styled API를 사용하면 React 외에 다른 JavaScript 프레임워크나 라이브러리와 함께 사용할 수도 있음)
           -> 대충 styled API를 사용시, 귀찮게 style 속성을 jsx 문법으로 2중 3중 {} 써가며 쓸 필요가 없기에 사용하는 라이브러리..

      # (중요!) CSS-in-JS 방식
         : JavaScript 코드 내에서 스타일을 생성하고, 해당 스타일이 component와 동적으로 연결되는 방식
            (= CSS를 작성할 때 일반적인 CSS 파일을 따로 생성하지 않고, JavaScript 파일 내에서 통제가 된다는 걸 의미)
               -> 결론부터 말하자면, CSS-in-JS 방식을 쓰기 때문에, component style에 대한 정의를 js 영역에서 마무리를 짓기 더 쉬워지고, 심지어 CSS 변수명에 대해서도 자유로워 관리도 쉽다 이거



      # (중요!) styled-components 라이브러리 사용시의 장점    
        1) CSS-in-JS 방식 = CSS파일 안 열어도 됨

        2) styled-API로 component의 style을 작성시, 해당 component의 영역인 {} 범위를 기준으로 오직 styled-API로 작성한 스타일만 적용되는 절대 영역이 생성! = 다른 전역변수들의 간섭이 차단됨
          (= component의 style이 지역변수화가 되어 다른 CSS나 js파일들에 의해 간섭 X)
              -> 전역 변수나 다름없는 CSS의 여러 변수들과 compoenent의 style 간의 의존관계를 끊어버림을 의미
                  -> CSS에서의 예상지 않은 충돌을 방지 가능!

        3) 해당 component의 style을 작성시, 특정 속성값에 ${ props => props.속성명 }과 같은 양식으로 props 객체를 통해 속성값을 전달할 수 있도록 작성하면, 코드를 재사용하고 CSS 변수명을 의식하지 않아도 되기에 component의 더욱 유연하게 구성 가능
           (= styled API를 통해 생성된 component에 선언 당시 적었던 '속성명'에 값을 주어서, 부모 component에서 props 객체를 이용하여 값을 전달하여 호환성이 높은 모듈화된 스타일을 유지할 수 있음)
               -> styled-API로 만들어진 component도 엄연히 component이기에 props 객체를 이용해서, 자식 component에 값을 줄 수가 있음

                  - 과정1. styled API를 통한 component 모듈화하기
                      : styled API를 통한 component에서 props 객체로 부터 값을 전달받을 수 있는 영역을 지정하여, props객체가 가져온 멤버속성에 따라 style이 달라지는 component 선언하기
                         -> ${} 안에는 조건문도 삼항 연산자로 사용 가능함

                        ex) let ColoredButton = styled.button`
                              background : ${ props => props.color };
                            `

                  - 과정2. 모듈화 된 styled component에 props객체를 통해 속성값을 전달하여 완성하기
                      : 모듈화 된 styled component를 부모 component에서 호출하면, 거기에 '과정1'에서 적었던 'props.속성명'과 값을 props 쓰듯이 사용하면 됨

                        ex) <ColoredButton color="blue">파란 버튼</ColoredButton>
                            <ColoredButton color="orange">오랜지 버튼</ColoredButton>

        4) component의 style 코드를 작성하는 것은 곧 또 하나의 component를 작성하는 것을 의미
            -> style과 component 로직이 함께 관리되어 코드의 가독성과 유지보수성이 향상

        5) 웹페이지 로딩시간이 단축됨
            -> CSS파일을 별도로 만드는게 아니라, HTML style 속성으로 들어가는 것을 의미함 = 새로운 페이지를 로딩시 CSS로딩하지 않고 필요한 style값만 가져올수도 있기 때문 
               (= 직전에 보고 있는 페이지를 기반으로 필요한 HTML요소만 받아오고 로딩하고 rendering하는 virtual DOM과 좋은 연관이 될 수 있음)


      # (중요!) styled-components 라이브러리 사용시의 단점
        1) js 영역이 복잡해짐

        2) component가 이게 styled API로 제작한 component인지, 일반 component인지 햇갈릴 소지가 있음
           (= 다시 말해, 코드 구조를 ㅈ같이 짰으면, 프로그래머 입장에서 코드 만지기가 ㅈ같아진다 이거임)

        3) 다른 jsx파일에서도 해당 styled API로 제작한 component를 쓰고 싶다면? 짤없이 import해야 함
           (= 커지면 커질수록, 내가 어디에서 작성한 styled API로 제작한 component인지 찾기도 ㅈ같고, import를 얼마나 빠뜨렸나 찾기도 ㅈ같음)
               -> 차라리 파일 1개에서 관리하는 전통적 CSS방식이 나을수도 있다는..?

        4) 협업 할 때, CSS 부분에서 작업 스타일이나 효율같은 부분에서 문제가 발생할 소지가 있음


      # styled-components 설치법
         : (node js가 깔려 있어야함) 터미널 열고 프로젝트 폴더에서 npm install styled-components 입력 


      # styled-components 사용법
        1) styled-components 라이브러리의 style이라는 객체(object)에 해당하는 부분을 ES module 방식으로 불러와서, import하는 명령어를 원하는 component 상단에 입력해 줌
            -> 이를 통해 style이라는 객체(object)만 import해서 해당 파일의 js영역에서 사용 가능하게 가져다 줌

               ex) import styled from 'styled-components';

        2) styled.component유형' 속성명1 : 속성값1; .. 속성명n : 속성값n; ' 형식으로 원하는 유형의 style component를 선언하고, style도 쉽게 적용이 가능함
            -> (주의!) single quotation(')이 아니라가 아니라반드시 백틱(`)을 써서 범위를 지정해야 함

                ex) let ColoredButton = styled.button`
                        background : blue;
                        padding : 10px;
                    `

        3) 사용을 원하는 component를 부모 component로 하여, 그 안에 2)에서 만든 style component를 일반 component처럼 사용해서, 원하는 위치에 style component를 배치할 수 있음

        4) (중요!) props객체를 사용한 모듈화된 style component 작성하기
            : props 객체를 통해 style component에 멤버속성값을 전달하면, style component의 구조는 유지한채 쉽게 속성만 바꿀 수도 있음

              - 과정1. styled API를 통한 모듈화된 style component 선언 단계
                  : styled API를 통한 component에서 props 객체로 부터 값을 전달받을 수 있는 영역을 지정하여, props객체가 가져온 멤버속성에 따라 style이 달라지는 component 선언하기
                     -> ${} 안에는 조건문도 삼항 연산자로 사용 가능함

                    ex) let ColoredButton = styled.button`
                          background : ${ props => props.color };
                        `

              - 과정2. 모듈화 된 styled component에 props객체를 통해 속성값을 전달하여 완성하기
                  : 모듈화 된 styled component를 부모 component에서 호출하면, 거기에 '과정1'에서 적었던 'props.속성명'과 값을 props 쓰듯이 사용하면 됨

                    ex) <ColoredButton color="blue">파란 버튼</ColoredButton>
                        <ColoredButton color="orange">오랜지 버튼</ColoredButton>


         5) styled.component유형(작성된 style component명); 을 통하 styled.component 복사
             : style component를 복사하는 방법은 복사하는 style component와 같은 메서드를 쓰고 그 파라미터로 대상이 되는 style component명을 투입하고, 다른 js변수에 대입하면 됨

               ex) let copiedButton = styled.button(ColoredButton);

      # (번외) component명.module.css 형식의 css문서
         : 이 같은 형식은 해당 CSS문서의 내용이 특정 'component명'의 영역에만 한정하여 지역변수처럼 작동하고, 다른 component에는 적용되지 않도록 하는 일종의 표식
           (= 기존 CSS작업 방식으로도 styled-components 라이브러리 사용효과처럼, 특정 component에 한정된 지역변수적 CSS를 적용 가능함을 의미)


 4. react-redux
     : props는 컴포넌트의 계층구조가 깊어지고 넓어지면 사용하는게 노가다에 가깝다는 것에, context의 단점까지 보완한 방식으로 component들이 state를 공유할 수 있게 하는 라이브러리
        -> 다른 state관리 라이브러리로는 zustand, MobX, Recoil, Jotai가 존재

      # redux 구동 원리
        : 전역 변수 state들을 보관한 store역할의 js 파일을 생성하고 나면... REDUX 라이브러리의 함수들을 통해, 모든 component가 그렇게 만들어진 store에 놓은 state들을 사용 가능함

  # redux와 store개념
     : 모든 component가 공유가능한 전역 객체에 해당하는 state객체의 각 요소들을 저장(store)하고 관리하는 중앙 저장소적인 redux의 개념
        -> store라는 전역 state객체를 관리하는 개념이 있기에, action을 받으면 그 값에 대응하는 state 개별 요소를 수정하는 reducer를 호출할 수 있는 것

       @ store 주요 기능
          1) state 저장
              : 애플리케이션의 전체 state를 JS객체 형태로 저장

          2) action dispatch
              : action은 상태 변경의 의도를 나타내는 객체로 이를 dispatch해야 state 변경이 가능

          3) reducer 호출
              : dispatch된 action을 입력으로 받아 새로운 상태를 반환하는 순수 함수인 reducer에 전달하여, 새로운 state를 계산하여 수정함

          4) 구독 관리
             : state 변화에 반응하기 위해 리스너(listener)를 구독(subscribe)할 수 있는 기능을 제공, state가 변경되면 스토어는 구독된 리스너들에게 알림


       @ store 주요 구성 요소
          1) state
              : 애플리케이션의 현재 전역 state를 나타내는 객체

          2) actions
              : 전역 state의 변경의 의도를 나타내는 객체로, 일반적으로 type 속성을 포함하며 추가적인 데이터를 포함할 수 있음
                 -> 이를 reducer에 전달하여 state를 번경

          3) reducers
              : actions 에 따라 상태를 변경하는 함수들
                (= 각각의 reducers는 특정 state에 대한 조각(slice)을 관리)
                    -> slice가 모이면, reducers가 된다고 보면 됨

          4) dispatch(action)
              : action을 store에 전달하는 함수
                 -> 이후 reducers를 통해 상태를 업데이트하도록 트리거됨

          5) subscribe(listener)
              : state 변화 시 호출될 listener 함수를 등록하는 함수
              
      # react-redux 설치법
        : (node js가 깔려 있어야함 + react 18버전 이상이 필요) 터미널 열고 프로젝트 폴더에서 npm install @reduxjs/toolkit react-redux 입력 
               -> redux toolkit = 기존 redux의 시전코드(boilerplate code)가 많다는 컴플레인 개선버전

      # redux (주의사항)
        1) redux의 store안에 들어가는 건 전역변수로 사용할 필요가 있는 state들 뿐임
            -> (중요!) 공유가 필요없는 state 변수들까지도 redux에 넣는 건, component에 존재하는 state들의 {}처리 및 캡슐화를 통한 정보 관리 기준을 무너뜨리는 짓임   

        2) store.js에서 state를 담는데는 상관이 없지만.. 다른 컴포넌트에서 사용될 공유 state의 export될 이름은.. 절대로 소문자로만 구성되어야 함!
           (= camalCase 같은거로 쓰면, react가 에러를 뿜으려 이름을 바꾸라고 함... )   

            ex) cartData = cartData.reduce (x)  -> cartdata = cartData.reduce (o)   

      # react-redux 사용법
        1) (경로는 어디라도 상관X) 전역변수로 쓸 state를 저장해 줄 store.js를 생성하고, 해당 라이브러리의 튜토리얼 용 코드를 복붙함
            -> 해당 js파일은 redux 라이브러리를 통해 모든 component들이 접근 가능하게 할 매개체   

        2) redux 라이브러리를 통해, store.js의 state들을 공유해서 쓸 component가 있는 js 파일가서 Provider 라는 컴포넌트와 아까 작성한 파일을 모듈로서 import 함
           (= 해당 프로젝트의 모든 component가 이를 쓰게 하고 싶으므로, index.js파일에 import를 함)   

            ex) import store from './store.js'   

        3) store.js에 공유된 state에 모든 후손들을 포함하여 접근할 권한을 주고 싶은 component를 Provider라는 태그로 감싸고, store라는 속성을 store.js를 import한 모듈변수명을 속성값으로 채워서 작성함
            -> 물론 Provider 태그 또한 react-redux의 변수이기에, 모듈 import를 통해 가져와야 함   

            ex) import { Provider } from 'react-redux';   

                <Provider store={import해온거}> <컴포넌트명> </Provider>   

        4) store.js 파일에 createSlice({name: state명, initialState: state값}); 함수를 통해 state변수를 생성함
            -> (중요) initialState 요소에 들어가는 state값은 아무리 복잡한 형식의 객체배열 or 배열을 멤버로 받는 객체라도 다 받아줌  

            ex) let user = createSlice({
                    name : 'state명',
                    initialState : state값 or [state값1, ... ,  state값N] or {멤버변수1 : 값1, ... , {멤버변수1 : 값1} 
                })   

        5) 하단의 무명 객체를 parameter로 받는 configureStore( { reducer: {} } ) 함수에서, reducer라는 멤버로 객체를 받는 멤버변수의 영역에 추가하여 store.js의 state 객체의 멤버로 등록
            -> 추가 양식 : state명1 : state명1.reducer라고 추가   

            ex) export default configureStore({
                   reducer: {
                      state명1 : state명1.reducer , 
                      ... , 
                      state명N : state명N.reducer 
                   }
                }) 

        6) 그렇게 추가한 state를 공유하여 사용할 component로 가서 useSelector(), useDispatch 함수 사용을 위해, useSelector를 redux라이브러리에서 모듈로 import함   

            ex) import { useSelector, useDispatch } from 'react-redux';   

        7) store.js의 원하는 state변수를 가져오고, 이를 변수에 저장해서 state변수처럼 쓰기 위해서는
            -> useSelector( (state 역할의 parameter명) => { return parameter명 } ) 함수를 써야함   

        8) store.js에 작성한 state변수의 내부 함수를 사용하기 위해서는 
            -> import 구문을 통해 모듈로서 그 함수들을 store.js에서 불러와야 함
            -> useDispatch(import한 함수명()); 을 통해, 이벤트를 짜고 store.js에 해당 함수를 실행하도록 요청을 넣음   

            ex) import { 함수명1, ... , 함수명N } from "./../store";   
                useDispatch(changeName());   

        9) 그렇게 가져온 변수들을 component의 랜더링 return에 사용하자   


     # redux 관련 함수
        1) createSlice({name: state명, initialState: state값 or [state값1, ... ,  state값N] or {멤버변수1 : 값1, ... , {멤버변수1 : 값1} });
            : store.js에 state를 생성하는 함수..로 parameter는 state를 구성할 내용을 담은 object를 담음   

              @ createSlice()의 parameter 객체 구조
                 - name         : state의 이름값을 가지는 멤버변수 (이 녀석을 나중에 reducer 안에 등록해서 사용)
                 - initialState : state의 실질적인 값을 가지는 멤버변수
                     -> (중요) initialState 요소에 들어가는 state값은 아무리 복잡한 형식의 객체배열 or 배열을 멤버로 받는 객체라도 다 받아줌  
                      
        2) useSelector( (parameter명) => { return parameter명 } )
           : redux 라이브라리의 함수로 만들어 둔 store를 가져와서, 그 안의 모든 state들을 담아두는 state객체 형식으로 반환해주는 역할하는 react hooks 함수의 일종 (= useContext()와 유사)
             (= axios나 fetch를 통해 외부서버로 API 보내 담은 데이터와 개념이나 사용법이 유사하기에, return 부분을 parameter.원하는state명 방식으로 원하는 데이터만 취하는거도 가능)
                -> (추측) tools로 오면서 react hooks의 추세에 맞춰 로직 및 API 사용법을 변형한 느낌   
                
        3) configureStore( { reducer : { state명1 : state명1.reducer , ... , state명N : state명N.reducer })
            : store.js에서 생성된 전역state변수들이 외부 컴포넌트에서 사용될 수 있도록 등록하는 함수
                -> (중요) 외부에서 호출하는 용도로 사용될 전역 state명의 구성은 절대로 소문자로만... 
                -> (중요) 전역 state명에 어떤 state변수가 매핑될지는 'state명.reducer'로 결정   

        4) useDispatch(import한 전역 state함수명)
            : store.js에 만들어 둔 전역 state함수명이 호출되도록, store.js에 요청을 보내는 redux 라이브라리의 react hooks 함수의 일종
               -> 요청을 보내는거지.. 실제 함수의 실행은 store.js에서 해줌   

         5) current(state)
             : proxy 객체배열인 state의 현재 상태를 볼수 있게 하는 함수   


     # 전역 state변수의 내부함수 만드는 법
        : store.js 내부에 존재하는 전역 state를 생성하는 createSlice() 함수의 parameter로 들어가는 무명 객체의 name, initialState 이외의 reduce라는 멤버객체 내부의 멤버함수를 선언하여 생성함 (= 사실상 setState 함수도 이런식으로 만듦)
           -> (중요) 생성 함수의 parameter는 2가지가 존재함
                1. state
                    : 해당 state 멤버객체 그 자체를 나타내는 parameter로 this와 용도나 관계가 비슷함
                       -> state 그 자체는 proxy 배열 객체로 현재 값을 알기 위해서는 current(state) 식으로 함수를 이용하면 됨
                           
                2. action
                    : 실질적으로 들어가게 되는 변화무쌍한 동적타입과 값을 지닌 parameter.. 
                      (= 사실상 state객체의 값이 array/object 같이 레버런스 주소값과 연관된 타입일 경우, 이를 함수를 통해 사용자가 의도적으로 가공하기 위한 목적으로 선언하여 사용하는 parameter라고 생각하면 됨)
                          -> 내부에 멤버변수들이 많지만, payload라는 멤버변수가 실제로 투입된 값으로서 사용 + type라는 멤버변수는 호출 함수명을 저장하고 있음    

          ex) reducers : {    

              1) 해당 state가 가진 값이 단일 값인 경우
                  : 개별 전역 state의 내부함수는 정적인 연산 및 값으로 state의 값을 수정하거나, state라는 parameter를 통해 기존의 state 값을 이용하여 state값을 새롭게 수정가능    
                    changeNameExample1(state){
                        return 'john' + state.name;
                    },    

              2) 해당 state가 가진 값이 단일 객체인 경우
                  : 개별 전역 state의 내부함수는 새로운 객체값을 반환하여 해당 state값을 객체 단위로 통째로 수정 가능    
                    changeNameExample2(){
                        return { name : 'park', age : 20 };
                    },   

              3) 해당 state가 가진 값이 '배열(array) or 객체(object)'인 경우
                  : return 문구가 없이도 직접적으로 state값의 멤버변수를 state parameter를 통해 직접 수정해도, 해당 state 값에 수정한 변화가 적용됨
                     -> immer.js 라는 redux 라이브러리의 파일 덕분에, return으로 반환되는 array/object가 없어도 됨
                        (= immer.js 라이브러리는 자동으로 수정된 state 멤버값이 반영된 array/object를 깊은 복사 생성한 뒤, 함수의 결과값으로 그 수정된 객체를 return해주기 떄문)    
                    changeNameExample3(state){
                        state.name = 'park';
                    }, 

              4) 해당 state의 값을 의도를 가진 parameter를 기입한 뒤, 이를 이용하여 사용자가 의도한 대로 가공한(연산값 or index로) 값으로 수정하고 싶은 경우
                  : this 역할하는 state라는 1번째 parameter외에, 사용자가 함수 호출시 기입한 기입한 동적인 타입의 특정값을 의미하는 action이라는 2번째 parameter를 통해 payload라는 멤버변수로 그 값을 불러와 연산 or index 지정을 할 수 있음
                     -> 해당 특성은 함수를 parameter나 변수로도 취급가능한 일급시민으로 인정해주는 js의 특성과 연계되어, 다양하고도 복잡하게 응용되어 대부분의 의도를 수행가능함    
                    increaseAge(state, action ){
                        state.age += action.payload;        <- action을 연산에 사용  = increaseAge(100) : state갑에 100을 더함 
                    },     
                    setCount(state, action){
                        state[action.payload].count++;      <- action을 index에 사용 = setCount(100) : 101번쨰 데이터의 count라는 멤버변수에 1을 더함
                    }
              }    

     
      # (중요) useDispatch를 통해 전역 state의 함수에 요청만 보내는 이유?
         1) 각 component에서 전역 state를 건들게 만드는 경우와 다른데, 전역 state에 영향을 미치는 경우를 store.js에만 한정하게 해서, 코드 관리나 디버깅이 쉬움
         2) 모든 전역 state 함수의 실행시, 무조건 store.js와 통신이 되어야 함으로.. 서비스 문제가 발생할떄도 원인찾기가 여러모도 수월함


 5. (tanstack) react-query
     : React Application에서 Hooks(use뭐시기 형식의 리엑트의 기능들을 함수형으로 사용가능하게 한 함수집합)형식의 함수를 통해 사용하여, component로부터 서버의 데이터 상태를 불러오고, 캐싱하며, 지속적으로 동기화하고 업데이트 하는 작업을 도와주는 라이브러리
        -> 그러니까, 대충 실시간으로 ajax 관련 지속적인 데이터 요청을 받고 응답해야 하는 서비스(실시간 SNS, 거래소)를 구현하는데 편하기에 도움이 되는 라이브러리라 볼 수 있겠다...
           (= redux 개량판인 toolkit도 RTK Query라고 비슷한걸 제공하니 참고)
               -> 사실, Redux state 변경함수 안에선 ajax요청하면 안 된다는 불편함을 변수별 useSlice()를 통해 전역 state안에서 해결할 수 있도록 해소하고, Redux state와 관련있는 ajax들을 효율적으로 관리하는데 더 집중하는 라이브러리에 가까움

      # 실시간 데이터 교류에 필요한 기능 LIST 예시
        - 몇초마다 자동으로 데이터 다시 가져오게 하려면?
        - 요청실패시 몇초 간격으로 재시도?
        - 다음 페이지 미리가져오기?
        - ajax 성공/실패시 각각 다른 html을 보여주려면?

      # (tanstack) react-query 설치법
        : (node js가 깔려 있어야함 + react 18버전 이상이 필요) 터미널 열고 프로젝트 폴더에서 npm install @tanstack/react-query 

      # react-query 사용법
        1) import { QueryClient, QueryClientProvider, useQuery } from '@tanstack/react-query' 를 시작할 컴포넌트(= 사실상 최선조인 index.js)에 입력함
        2) QueryClient(); 를 통해 QueryClient의 객체를 선언해주고, 이 객체를 <QueryClientProvider clinet={QueryClient()를 받은 변수}> 태그를 선언하는데 사용함.. 
            -> <QueryClientProvider> 태그는 가장 react-query를 적용할 모든 컴포넌트 및 state를 감쌀수 있는 위치로 향한다
        3) useQuery()라는 hook을 통해, 그 안에 서버로 API요청을 그대로 비동기로 보내고 난뒤, 이를 변수로 받으면..? 그 변수로 component에 추가적인 state 없이도 쉽게 요청에 대한 결과나 상태를 체크하고, 조건에 따른 HTML 출력을 짤 수 있음 
            -> (중요) key에 해당하는 부분은 반드시 배열 형식으로 넣어야함

            ex) let 변수명 = useQuery(['key값을 입력해야..'], () => 
                  fetch('API url') or axios.get('API url')
                  .then( (성공parameter) => {  

                    return 성공parameter.data;    -> 이후 result.멤버변수를 통해 ajax 요청에 대한 상태값 및 값을 state에 이식하지 않고도 받아올 수 있음
                  }), 
                  { 옵션명1 : 옵션값1 , ... , 옵션명n : 옵션값n }
                );


      # react-query 장점
        1) (중요) state 배치없이도, 내가 보낸 ajax 요청 성공/실패/로딩중 상태를 ajax요청결과를 담은 변수의 속성값으로 손쉽게 알 수 있음
            - result.isLoading : 현재 ajax요청이 로딩 중인지 여부를 true/false로 체크함
            - result.error     : 현재 ajax요청이 실패했는지 여부를  true/false로 체크함
            - result.data      : 현재 ajax요청이 성공했으면, 데이터가 들어오고, 이를 state 객체마냥 사용이 가능

        2) 1)의 특성을 이용해, ajax 요청의 결과에 따른 HTML 영역 내용을 조건문으로 쉽게 짤 수 있음    
        3) 자식 component에 props 객체의 멤버값으로 전송하지 않아도, 자식 또한 해당 값을 공유 가능함
            -> 정확히는 자식 component에도 같은 ajax요청을 보낼 시, 이를 중복되지 않도록 1번만 실행 후, 그 이후에는 캐싱한 내용을 사용하는 알고리즘임

        4) 주기적으로 ajax 요청을 날리고 내용을 최신화해줌
            -> 옵션 부분에 { staleTime : 숫자/mms }로 조절가능

        5) 실패시에도 마찬가지로 주기적으로 재시도 함
            -> 옵션 부분에서 마찬가지로 제어 가능

