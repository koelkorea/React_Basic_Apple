 [functional component를 기준으로 작성된 설명임을 밝힘]
   -> class component도 하단에 언급함.... 추후 class -> function으로 넘어가기까지의 역사나 hooks에 관련된 역사적 부분까지 정리할 예정

 react 라이브러리 사용시 jsx 형식을 사용하며, 그 내부에서 사용자지정 HTML 태그와 같은 <App>으로 명명되는 HTML conponent를 제작.. 
  -> react 라이브러리는 index.js에서 ReactDOM.createRoot(document.getElementById('root')).render 함수 안에 이런 conponent를 조립해서 블록으로 장난감 만들듯 구성한 페이지
     -> ReactDOM 라이브러리의 static함수인 render API를 통해, 이를 최종적으로 index.html의 root라는 id의 div태그에 전달함으로서, 브라우저가 rendering을 하게 함

 - jsx(java script extention)란 무엇인가?
    : js에 자체적인 확장 문법을 곁들은 형식의 언어로 이를 통해서 react는 프로그래머에게 코딩의 직관성과 편의성을 강력하게 제공함
       -> 1. js에서 HTML component 작성을 통해, html 구성의 기본 벽돌과도 같은 component를 html 형식의 문법 거의 그대로 사용해서 쉽게 만들 수 있음
              : 일단 component를 만들어두고, 모듈러를 통해 가져온다면 <컴포넌트명> 형식으로 작성하여, 작성한 html 코드를 쉽게 재사용이 가능함
                 -> (주의!) 단! 반드시 component는 하나의 <div> 태그만을 최상위 부모로 가지고 있어야 함
                            (= 병렬의 div를 짜지 말라는 말... component는 말 그대로 jsx를 통해 작성하는 html의 최소단위라고 보면 됨)
                            
       -> 2. 어떤 component를 구성하는 특정 html 태그의 이벤트핸들러 안에서만 통용되는 스코프를 {}를 통해서, 해당 html component가 사용자의 조작에 반응하는 반응형 component가 되게 할 수 있음
              -> 해당 html영역에서만 통용되는 js변수를 선언하고, component에서 선언한 js변수를 쉽게 {}안의 js변수(보통은 state)와 대입함으로서 'DOM조작 명령어 없이' 해당 component가 내용에 따라 변화하도록 이끌 수 있음  
                  : 이를 추후 서버로 부터 데이터를 받는 것 + state의 set함수를 통한 변경시 조건부 랜더링이라는 특성과 props를 통해 이를 타 compoenent에 전달하는 법을 조합하면, 아주 쉽게 html의 content를 효율적으로 채울 수 있음

       -> 3. 시멘틱 + get, set 캡슐화 구현 + 변경시 rendering 자동 수행되는 state와 다른 자식 component에 '일괄적'으로 html 속성을 넣는 형식으로 다양한 형태의 값들을 전달
              - state : 해당 페이지 안에서만 쓸 지역변수로서의 목적을 가지고 선언한 get, set 로직이 적용된 변수
              - props : '부모 component -> 자식 component'로 '일괄적'으로 html 속성을 넣는 형식으로 다양한 형태의 값들을 전달하기 위한 목적을 가지는 js객체
                        (= props의 핵심은 부모 component에서 속성을 적고, 그 값으로 부모 component의 state값을 넣어 또한 전송할 수 있다는 점에 있음!)
                           -> 누군가의 자식인 component는 component들은 'props'의 역할(일반적으로는 props라 지음)을 하는 parameter를 단 1번만 받음

  # js가 아나라 jsx(java script extention)를 쓰는 이유?
    : 순수 js만 써서하려면... 그냥 React.createRoot 함수를 짤없이 써야하는데, 이거보단 그냥 html 흉내라도 내게 하는게 더 직관적이라 jsx를 씀
       -> babel 같은 ECMA5 JS 이전 버전으로 호환성 맞추는 컴파일러를 쓰면 다 확인이 어느정도 가능함을 확인 가능

  # (주의!!) jsx(java script extention)도 엄밀하게는 js를 기반으로 함
     1. js에서 예약어로 쓰이는 단어인데, HTML component에서도 속성으로 사용하는 단어가 있는 경우는 이를 다르게 쓸수 밖에 없음을 명심해야.
        -> 그 대표적 CASE가 class로.. js에서는 class 타입을 선언할 때 사용하며, html에서는 html 요소의 속성으로 사용되기에... 그 양자는 서로 구분될수 있어야함

           ex) class -> className

     2. style 속성도 작성시 'style = { {key : 'value' , key : 'value' } }' 형식으로 작성해야 한다는 불편함이 존재함    
        -> 엄밀하게는 js지 html이 아니기에 style을 기존 html 형식으로 ""안에 통쨰로 작성하면, js 문법으로는 도저히 해석하도록 코딩하기가 어렵기에..
            -> 그래서 js 객체 형식인 {key : value}을 이용해서 style이 jsx 형식에서 코딩 가능하도록 구현

     3. style 속성의 세부 속성들 중 font-size 같이 '-'가 들어 간 녀석들은 fontSize 값이 일종의 camalCase 형식으로 바꿔야함
         -> js에서 -은 -연산자로서 작동하기 때문

           ex) <h1 style= "color : red", font-size : '16px'>  ->  <h1 style={ {color : 'red' , fontSize : '16px'} }>

 - {}문법의 포텐셜
     : 스코프{} 영역은 고립된 js 지역변수들의 영역이기에, 여기서 js변수를 선언해서 손쉽게 component 차원에서 선언된 JS변수(state, props와 연관)에 값을 대입하기만 하면,
        ->  HTML 그 어떤 요소(속성, contents 등 어디를 불문하고) 에서라도 data binding(= 내용이 자동으로 반영)됨
            -> (중요!) 최종적으로 state, props객체의 전달값 변경과 연동된 render API를 통해, DOM조작 없이 내용을 바꾸면서 자동으로 render되게 만드는 시발점이 됨

  # js 변수가 있는데, state변수나 props객체를 써야 하는 이유?
     : 1. 분명한 용도적 의미를 가지며
       2. js의 구조 분해 할당(destructuring assignment) 문법을 통해 구현한 getter setter 로직을 써서 캡슐화를 구현함
       3. (가장 핵심적인 이유!) state 변수 , props객체의 멤버변수의 값 변경 = 자동 rendering의 트리거 조건
          (= 기존 js 변수들처럼 이벤트핸들러 같은 짓으로 DOM조작 코드를 짜지 않아도, 값 변경시 이들과 연관된 html 태그만 rendering이 자동으로 실행되는 기적을 맛 볼수 있음)

 - state 
    : 해당 페이지 안에서만 쓸 지역변수로서의 목적을 가지고 선언한 get, set 로직이 적용된 변수 + state값의 변경이 감지시 해당 html 재rendering 
      (= 해당 component에서 값이 변경되었을때, html에 자동으로 내용이 반영되고 rendering되게하고 싶을 떄? state를 사용 ㅇㅋ) 
          -> (중요) setstate 함수는 비동기함수!!!!

    # (중요) state 과거사
       : state도 원래는 props와 마찬가지로 object 속성이며, functional component 기준으로 구조분해 할당과 useState 함수를 통해 만들어진 개별 state들은 state객체의 멤버속성

    # (중요) batching 개념 
       : 만약? 1개 component에 state를 많이 썼는데? 일괄적으로 변경되면? 얘는 n번만큼 rerendering을 하나?
           -> 이런경우 react는 virtual dom의 이점을 적극활용하여 최종적 결과물에만 1번만 rendering을 함 + react 18부터는 ajax요청, setTimeout 안의 setstate 함수가 여러개 있더라도 이를 batching을 반영해 주어 최적화 수준을 더 올림
               -> 만약 의도한게 batching과 1도 연관이 없는거면, flushSync 함수를 사용하자..

    # state 사용법
       1. 변수타입 [getter함수의 별칭, setter함수의 별칭] = useState('변수가 담을 value값'); 작성
           -> 참고로 parameter로 들어갈 내용을 []을 통해 여러개 담아도 사용가능함

       2. {} 문법을 통해 conpent의 원하는 자리에 사용함

           @ getter함수의 별칭
              : 해당 state값을 조회하고 싶을때 사용하는 변수명
                 (state getter함수의 사용법) 
                   : getter함수의 별칭
                      -> state 배열을 사용했을 경우?
                          : 'getter함수의 별칭[index]'로 원하는 state요소에 접근 가능

           @ setter함수의 별칭
              : 해당 state값을 수정 + 변경된 state값을 반영한 html영역을 다시 rendering 하도록 조치하고 싶을때 사용하는 변수명
                 -> 이 setter 역할의 함수는 비동기방식(= 병렬로 다음코드를 계속 처리)으로 재rendering 처리되어서, rendering의 결과가 당장에 반영되지 않고, 화면에는 늦게 반영함

                 -state setter함수의 사용법
                   : setter함수의 별칭(state가 될 value or 연산식 or 변수명);

                      -> (중요) set함수를 쓰지 않아도, state를 바꿀수는 있지만...
                                자동 rendering의 작동 트리거는 set함수를 통해 state를 변경하는 것이기에 state에 set을 안쓰는건 react를 사용할 의미가 없다는 점과 같음을 명심하자

                      -> (중요) state 배열을 사용했을 경우? 
                          : 'setter함수의 별칭(배열변수 or 배열 그 자체)' 와 같이 parameter로 배열이 들어가게 해야함
                              -> 이 또한 js의 구조분해 할당 문법의 원리로 작동
                                 (= '주는쪽 배열의 요소개수 != 받는 쪽 배열의 요소개수'  ->   대입이 가능한 index에 해당하는 요소들만 대입하고, 나머지 index는 관련 X)

                              1. setter함수의 별칭(배열 그 자체)를 통한 state 배열 수정
                                  : 'setter함수의 별칭[수정내용1, 수정내용2 , ... ]'로 배열 그 자체를 parameter로 투입해서 원하는 state요소를 순차적으로 일괄 변경도 가능함
                                      -> But! 이렇게 state 배열을 사용하면서 setter 또한 배열로 parameter를 줘서 사용하면.. 유지보수나 확장성이 아예 병신이 되므로 추천은 하지 않음

                              2. setter함수의 별칭(배열변수)를 통한 state 배열 수정
                                  : let 배열명 = [...타 배열변수명]'로 스프레드 문법(spread syntax)을 통한 state 배열을 깊은복사를 한 뒤,
                                    배열명[index] = '원하는 value값' 과 같은 식으로 새로 선언된 배열의 원하는 index의 요소에 원하는 값을 대입하고,
                                    'setter함수의 별칭(배열명)' 과 같은 식으로 원하는데로 값이 수정된 state배열로 수정 
           
                                 ex) let [states, setStates] = useState(['내용1', '내용2', '내용3']);
                                      : 여기서 states라는 state는 state배열로 선언되었고, component에 2번째 요소인 '내용2'에 대한 부분을 담고 싶은 html 태그가 있다면?
                                          -> getter의 경우 : { states[1] }; 이런식으로 작성함
                                          -> setter의 경우 : 
                                              1. 배열 그 자체 parameter로
                                                  : { setStates(['내용1', '내용4', '내용3']); } 이런식으로 set 함수를 통해 변경 
                                              2. 깊은복사한 배열변수 parameter로 
                                                  : let copyArray = [... state]; 로 스프레드 문법(spread syntax)을 통한 state 배열을 깊은복사를 한 뒤
                                                    copyArray[1] = '내용4';
                                                    setStates(copyArray); 이런식으로 작성

 - props 
   : '부모 component -> 자식 component'로 html 속성을 넣는 형식으로, 부모 component의 {} 제한을 넘어 '일괄적'으로 다양한 형태의 값(일반문자도 가능)들을 전달하기 위한 목적을 가지는 js객체 + props값이 변경되어 다시 전달시 해당 html 재rendering 
     (= props의 핵심은 부모 component에서 속성을 적고, 이를 통해 부모 component의 state값 또한 전송할 수 있다는 점에 있음!)
        -> 해당 component에서 부모 componont에서 값들을 받아 사용하고 싶고, 변경사항이 생길시 자동으로 다시 전달되어 내용이 반영되고 rendering되게하고 싶을 때? props를 사용 ㅇㅋ?
 
 
    # props 사용법
  
      1. <자식components props속성명1 = { state명 } props속성명2 = "속명2 내용" props속성명 = {속성3 속성값} /> 형식으로 'props속성명'과 그에 해당하는 값을 { js객체명 }이나 "문자열" 같은 방식으로 적음
      2. 자식components의 function에 'props'에 해당하는 parameter를 적음
      3. 자식components 안에서 { props.속성명 } 형식으로 부모 component로 부터 전달받은 props 속성을 골라서 사용 
  
         ex) function App (){
               let [글제목, 글제목변경] = useState(['남자코트 추천', '강남 우동맛집', '파이썬독학']);
               return (
                 <div>
                   </ Modal 글제목전달={글제목}         <- 부모 component <App>에서, 자식 component <Modal>에 '글제목전달'이란 속성명에 '글제목' 이란 부모의 state값을 대입해서 props객체의 멤버변수로 전달
                            color = "blue"     >      <- 부모 component <App>에서, 자식 component <Modal>에 'color'이란 속성명에 'blue'란 문자열 값을 대입해서 props객체의 멤버변수로 전달
                 </div>
               )
             }
             
             function Modal(props){
               return (
                 <div className="modal" style={{ background : props.color }}>     <- 자식 component <Modal>은 부모가 전달한 props객체에서 'color'라는 멤버변수의 값을 꺼내서 style 태그의 값으로 써먹음
                   <h4>{ props.글제목[0] }</h4>                                    <- 자식 component <Modal>은 부모가 전달한 props객체에서 '글제목'이라는 부모의 state값인 멤버 배열변수의 1번쨰 요소를 꺼내서 contents 요소의 값으로 써먹음
                   <p>날짜</p>
                   <p>상세내용</p>
                 </div>
               )
             }
  

    # props객체 핵심적인 특성 및 전달 방식의 장, 단점
       : props 객체는 부-자 component에서만 통용되는 일종의 지역객체 + 부모 -> 자식 편도적 전송 흐름 + 전송의 대상도 부-자 component에만 한정
          -> 단점인 노가다로 인한 개발자의 실수를 줄이고자, 일부 자주 사용되는 props로 전달되는 값을 아예 전역변수로서 관리하자는 취지의 의견 등장
              -> redux 라이브러리의 탄생
  
          @ (장점) 
             : 개발자가 생각해야 할 side effect가 적음
                1) 지역변수로서 다른 component에 영향 X 
                2) component간 값의 흐름을 예측하기 쉬움 
                3) 전송되는 값이 개발자가 적은것에 한정되어 딱 정해짐 
  
          @ (단점)
             : 값의 지속성이 일시적 + 전달 시 값의 나열도 일일히 해줘야해서 노가다가 심하기에 관리하기가 힘듦...
                1) 자신의 영역에서만 살아있는 지역변수를 계속 쓰려면 다른 component에 전달, 전달의 연속  
                2) 자주 사용되는 값일수록, 노가다를 통해 매번 개별 다른 자식 component의 속성으로 나열해서 props객체로 값을 보내야 하는 반복의 노가다를 맛봐야 함
                3) 철저히 1:1 구조의 component간 일방적 전송이라... 그 밑의 후손들에게 전달할거면 마찬가지로 2)의 노가다를 또 겪어야 함..
  

    # (중요) props 의 특성
       : 순수 react의 props객체의 전달 대상은 '부모 -> (개별) 자식' +  자동으로 더 후손 component로 전달도 X 라서... 
          -> 전달할 props객체의 멤버변수와 자식 component의 머리수가 많아지면? 그거 관리하는게 사실상 노가다에 가깝고, 개발자의 실수로 인해 많은 삽질이 발생할 소지가 있음
             (= 대부분의 component들이 쓰는 공통의 속성값의 경우, 전역객체 props를 통해 관리되어야 할 필요성 존재)
                 -> redux의 등장
  
      1. props를 통해 부모 component는 함수나 클래스 {}제한을 넘어, 사실상 다른 함수나 클래스 {}에 속한 자식 component에 값을 전달할 수 있음
      2. (중요!) 반드시 '부모 -> (개별) 자식' 으로만 일방적으로 전달됨
           -> 자식 -> 부모, 형제끼리 props객체 전송 같은건 불가능
               -> 따라서, 어떤 state를 사용하는 component그룹이 있다면, 거기서 가장 상위의 선조 component에게 state를 선언해두는게 좋음
               
      3. 각 props객체를 구성하는 멤버변수들은 개별 component만을 기준으로 일종의 지역변수 개념으로 작성됨
         (= component만 다르면 속성명 겹쳐도 상관 없음)  
  
      4. (3번의 지역변수 개념에 의거..) props객체는 개별 component 단위로 전송되며, props에 들어갈 멤버변수는 반드시 해당 자식 component에 속성형식으로 일일이 열거되어야 함 
         (= 자식 component가 자신의 아들 및 후손 component에 값을 보내고 싶으면, component마다 props객체의 멤버로서 전달할 속성을 일일히 기입하는 노가다를 뛰어야 함) 
            -> 그거 ㅈ같아서 몇몇 변수는 전역객체 props로 전달해서 쓰기위해 만든 라이브러리가 redux!
  

    # props 사용시 유의점
      1. 부모 component 측에서 props로 전송 가능한 속성의 갯수는 제한이 없음
      2. props 객체의 멤버변수로 들어가는 속성에 들어갈 수 있는 값의 자료형 또한 제한이 없음
         (= 부모 component의 state값 또한 전송가능한 수많은 자료형의 일부에 지나지 않음)
            -> (중요!) 심지어 함수도 전송이 가능!
  
      3. props 객체를 전송받는 자식 component는 parameter로 받는 props객체를 객체 그 자체로 1번만 받고, 거기서 필요한 멤버변수를 꺼내서 그 값을 component 구현에 사용함
          -> parameter명에 props라고 이름까지 정해져 있진 않지만, 일반적으로 props로 적음  
  
      4. 자식 component로 전달된 props객체는 값의 수정을 위한 접근이 일반적으로는 불가능함
         (= 전달된 props객체는 일종의 값들이 새겨진 앍기전용의 상수 창고로서, 값의 복사는 가능해도 수정은 불가능하다 생각하면 이해가 쉬움)
  
      5. (중요!) 하지만! props객체를 통해 전달된 setstate 함수를 통해서, 부모의 state 변수 자체를 수정하는 방식으로 부모 component의 값을 통제하는 것은 가능함!
           -> 애초에 props를 통해 부모 component의 state를 이용한 권장사항이기 때문에 당연히 잘되는게 당연함
  
      6. (중요!) 그렇지만, props객체에 유저가 수정을 위한 접근이 불가능할 뿐이지, 5번 이외의 이유로도 변동이 생기면, 재rendering이 시작되고 반영된다는 점은 명심해야 함
           -> props객체로 전달된 setState로 부모 component의 state값을 통제하여 rerendering을 유도하고, 그로 인해 props객체가 다시 값을 가져와야 할 필요로 인한 변화는 의도된 합법
              (= props객체의 전달값 중 부모의 state값에 해당되는 부분이 수정되어 변해서 다시 전달되는거 상황말고, 다른 props값에 해당하는 부모 component의 속성값이 직접 수정되어 rerendering이 일어나는건 권장사항이 아님)
  
                 ex) function ParentComponent() {
  
                       let color = 'red';
                     
                       setTimeout(() => {
                         color = 'blue';             <- setTimeout()을 통한 props객체에 포함되는 속성값의 강제 수정을 유도하여, props객체의 변화까지 인위적으로 이끌어내는 예외
                       }, 1000);
                     
                       return <ChildComponent color={color} />;
                     }
                     
                     function ChildComponent(props) {
                       return <div style={{ background: props.color }}>Hello, World!</div>;        <- props.color의 값 변경으로 ChildComponent가 rerendering
                     }
  
  
    # 자식 -> 부모, 형제 -> 형제 끼리 component 전송이 불가능한 이유에 대한 추론?
       : 애초에 호출된 component을 react팀은 자식 component라 정의하고, 거기에 html 속성 형식으로 사용자가 적은 값들에 대해서는 부모 component가 타 component를 호출하는 것을 접점으로 전송하도록 로직을 구성하였기 때문
         (= 애초에 component 호출을 통한 접점 관계를 부모 - 자식이라 명명함 + 형제관계나 자식 - 부모 관계는 그렇게 값을 전달할 방법이 로직적으로 존재하지 않음)


- Context API
    : props는 컴포넌트의 계층구조가 깊어지고 넓어지면 사용하는게 노가다에 가깝다는 것을 해결하기 위한 방책 중 하나로 react에서 기본제공하는 API
       -> 대충 공유한 state정보를 저장하는 context 객체를 생성하고 나면, 그 context객체에 접근가능한 component를 지정하고 state의 종류를 지정해서, 해당 컴포넌트의 후손들이 자유롭게 state에 접근가능하게 함 

    # 사용법
       1) createContext()로 context 제작
       2) 해당 context를 사용할 component를 <context명.Provider> 태그로 감쌈
       3) <context명.Provider> 안에 value 속성을 추가하고, 공유할 state들을 js {}안에 속성 객체형식으로 나열해 작성함
       4) 제작한 context를 export 처리하고, 사용할 component 파일에서 해당 context가 저장된 변수를 import함
       5) useContext(context명)라는 reacthooks 함수를 사용하여, 제작된 context1안의 state 들을 state 객체 형식으로 변환해서 반환함
       6) 5번을 통해.. props 문법 없이 해당 component와 후손들이 context안에서 공유하기로 한 state값들을 static 값 마냥 가져다 씀  

          ex) export let Context1 = createContext(); 
              <Context1.Provider value={{ stock, shoes }}>
                 <Detail shoes = {shoes} /> 
              </Context1.Provider> 
              ------------(다른 component가 있는 jsx 모듈 안에서...)-----------
              import { Context1 } from '파일경로'; 
              ------------(원하는 Detail가문 내 compoent안에서..)--------------
              let example = useContext(Context1);
                -> example.state명[index번호] 식으로 사용 

    # (주의) Context API를 잘 안쓰는 이유
        -> (중요!) 결론 : 이 2가지 이슈들 문제로... 아예 전역으로 쓸 state를 나열하고, 별 문제없이 가져다 쓰게하자는 외부 라이브러리 'redux'를 쓰게 됨 

        1) Context랑 연관된 전체 component 가문들의 경우 무지성적 rerendering 이슈
           : 해당 context의 state를 안쓰는 component들도 만약 context를 쓰기로 한 component의 가문 안에 소속된 경우...
              -> context의 state들을 쓰던말던 걔들이 변경될때마다, 모든 가문구성원 component들은 일괄적으로 rerendering 됨...
                 (= 비효율적인 rendering 이행으로 인해, 컴퓨터 자원 낭비가 심하고, 성능으로 말이 안 나올수가 없음) 

        2) Context를 직접 사용한 component는 재사용이 어려움
           : 어차피 component에서 context를 가져다 쓸거면, 또 모듈로 context, useContext를 모듈로 가져와야 하는데? 
               -> 그렇게 API가 적용된 component를 또 다른 모듈에서도 재사용을 하게 되어 중첩되기 시작하면?
                   -> 결국 기존 props처럼 프로그래머의 노가다를 요구하게 되고, 사람의 실수로 인한 비효율적 문제가 터져나오게 됨

  - component 란?
    : react 라이브러리에서 JSX(JavaScript XML) 문법을 사용해서, 웹페이지의 상태(state)와 속성(properties)와 이벤트 핸들링을 수행하는 User Interface에서 rendering의 기본 단위로서 기능하는 독립적인 모듈
       -> 쉽게 말해.. 다음과 같은 성질을 전부 가짐
           1. component는 js를 기반으로 작성된 일종의 HTML 요소로서, react에서는 rendering 기본 블록같은 단위를 의미
           2. component는 그 자체가 상태(state)와 속성(properties)을 가지고 이벤트헨들링까지 독립적(stand alone)으로 수행 가능함
           3. React.Component를 기반으로 그 자식 class로서 구체적인 component가 작성될 수도 있지만, 함수처럼 호출하면 즉시 관련 component를 return해주는 방식으로 사용도 가능
           4. JSX(JavaScript XML) 문법 라는 특수 문법으로 구현
           5. component는 독립적으로 동작 가능 =  일단 만들어두면 다른 component에 가져다 붙여서 확장 가능 (= component tree 구조)
               -> 코드의 재사용성과 유지보수성을 높여줌 + 확장성이 뛰어나서, 복잡한 UI를 구현할 수 있음
           6. 다른 component에 호출된 하위 component는 호출한 component와 '부모 : 자식' 관계를 가지며, parameter를 통해 부모 component로부터 state들을 모은 js객체(= props)만 전달받아 부모의 state를 사용 가능함
  
  
    # component 사용의 주의점
       1. component는 일종의 rendering 가능한 html 요소 단위로서 1개의 component는 단 1개의 최상위 선조격 div만 가지고 있어야 함
          (= 애초에 component를 왜 쓰는지에 대한 semantic한 부분을 생각하고, 해당 component를 개발자가 왜 조각으로 만드는지 생각해야 함) 
             -> 굳이 써야 한다면? 빈 태그( <> <compoenent></compoenent> </>)로 나머지를 감싸는 fragment 문법을 쓰자
  
       2. component간 상태(state)는 공유 불가능이며, 부모-자식 간의 속성(properties)만 전달이 가능할 뿐임
          (= 쓸데없이 component를 쪼갰다가, 개발자 입장에서 인지 불가능한 수준으로 스파게티코드를 맛볼 수 있음)
  
       3. component만으로 구성된 배열을 만들수 있음
          (= 애초에 js에서 html 태그도 마찬가지로 배열로 만들 수 있음)
  
          ex) [<div>안녕</div>, <div>안녕</div>, <div>안녕</div>]       <- js에서 가능
              [<Modal/>, <Modal/>,  <Modal/>]                          <- jsx에서만 가능
  
       4. (중요) objects are not valid as a react child (found: object with keys { 문제있는 key명 }) 오류 주의!
            : react에서는 component를 rendering 하는 과정에서, 화면에 출력할 때 필요한 state나 props객체의 멤버변수가 가지고 있는 값이 '객체(object)' 자료형일 경우 rendering을 하지 못하고 오류를 뿜음
               -> 문제의 핵심은 현재 rendering하라고 던져준 변수가 key : value 형식의 object라, react 상에서 뭘 화면에 띄어줘야 할지 모르는것에 있음
                  (= error 메시지가 어떤 key명이 문제의 쟁점인지 파악 후, 그런 key를 가지고 있을법한 object 객체를 가진 component가 무엇인지 찾아서, 그 객체가 자신의 value만 온전히 띄울수 있도록 object를 다른 타입으로 형변환 시킴)
  
                     ex) <h4>{ 글입력배열[i] }</h4>   ->   <h4>{ 글입력배열[i].입력값 }</h4>
                           : 글입력배열[i] 자체가 key : value를 가진 object라, 이를 문자열인 value만 가져올 수 있도록 '배열.key명' 문법으로 객체의 멤버변수를 지정함
  
    # component는 언제 쓸까?
       1. 반복적으로 잘 쓰이는 html요소
       2. 값이 자주 변경되어, state와 props가 필히 필요해서 관리해줘야 하는 html 요소들
          (= 너무 component를 잘게 쪼게면, 관리 단위로서 component가 의미가 없으며, state관리가 더 복잡해짐)
       3. 페이지가 큰 html 요소 


    # (중요) component의 Lifecycle (생명주기)
        : react의 화면 구성의 기초가 되는 component는 크게 'mount(생성) - update(vdom의 rerendering을 통한 부분적 변경) - unmount(삭제)'의 3단계의 상태에 해당하는 시기를 거친다는 것을 의미하는 용어
          (= 정확히는 component는 mount와 unmount 2가지 상태를 지니는데, component를 갱신하는 update = 'mount(생성) - unmount(삭제) - mount(생성)의 과정을 따르는 것과 같음을 기억하자')
              -> (중요) 해당개념이 중요한 이유
                   : component의 관련 기능을 구현하는 과정에서 lifecycle의 개념을 사용하는 'lifecycle 메서드'가 이와 연관되어 있으며, 그 중 어떤 내용을 component의 rendering 후가 되거나 제거 전에 수행하라는 코드를 삽입하는 'lifecycle hook'을 사용할 수 있기 때문
                     (= lifecycle hook의 존재는 개발자가 확실히 특정 코드의 실행 시기를 사실상 완벽하게 통제할 수 있음을 의미함)
                         -> (중요!) rendering 완료 전, 후라는 시점은 별거 아닌거 같아도, 어떤 요소나 데이터가 로딩이 되지 않아 에러가 나거나, 성능이 쓸데없이 낮아지게 되는 원인이 된다는점에서 아주 중요함!
    

    # (중요) component의 lifecycle method와 lifecycle hook

        1) lifecycle method
           : class component에서 lifecycle을 기준으로, 상태 관리와 lifecycle 관리 및 부수 효과 처리(side effect 처리) 등 다양한 리액트 기능들을 사용할 수 있게하는 위한 함수들의 집합

             ex) setState() : 상태관리 멤버함수
                 componentDidMount() :
                 componentDidUpdate() : lifeCycle 상태를 트리거 삼아 호출되는 멤버함수
                 componentWillUnmount() : 
                 shouldComponentUpdate() : 리렌더링을 진행할지 여부를 결정함수

        2) lifecycle hook  
            : class component의 lifeCycle의 특정 시점에 실행되는 멤버함수 componentDidMount, componentDidUpdate, componentWillUnmount 통칭하는 함수집합
               -> hook의 의미는 일종의 이벤트헨들러와 연쇄되는 이벤트 내용처럼, component의 Lifecycle의 상태변화를 트리거 삼아 같이 실행되도록 갈고리를 건다는 의미를 가지고 붙여진 이름
                  (= 쉽게 말해, componentDidMount, componentDidUpdate, componentWillUnmount의 안에 적힌 내용들은 lifeCycle 상태에 따라 해당 함수들이 실행되면, 실행되게 설정된 코드들)
                 

              @ class component 시절 Lifecycle hook 관련 코드 구현
                 : componentDidMount(), componentDidUpdate(), componentWillUnmount()라는 class component의 멤버함수를 통해 해당 함수 스코프에 원하는 내용을 집어넣어서 사용
                    -> (중요!) Mount, Update는 rendering 후가 실행 시점의 기준 <-> Unmount는 component 해제 전이 실행 시점의 기준임을 명심해야 함

                   ex) class Detail2 extends React.Component {   
                           componentDidMount(){ Detail2 component 생성시 이 안의 코드가 실행 }                 <- component는 등장 후에 이것좀 해줘
                           componentDidUpdate(){ Detail2 component가 rerendering 될 시 이 안의 코드가 실행 }   <- component는 업데이트 되고나서 이것좀 해줘
                           componentWillUnmount(){ Detail2 component가 삭제 될 시 이 안의 코드가 실행 }         <- component는 '사라지기 전'에 이것좀 해줘
                       }

              @ function component에서 Lifecycle 관련 코드를 사용가능하게 된 시기의 구현
                 : function component의 기능을 강화하는 react hooks 중 하나인 useEffect() 함수를 통해 구현함
                    -> useEffect()
                        : lifecycle hook계열의 함수 기능을 function component 구조에서도 쓸 수 있게 하는 react hooks 함수
                           -> 기능 구현 자체는 lifeCycle hook처럼 lifeCycle 시점에 매핑되는 함수를 만들지 않고..
                              useEffect() 함수의 parameter나 내용을 통해, 내용 작동의 '시점'과 '반응할 state변수'를 설정함으로서 유저가 원하는 lifeCycle hook의 내용을 세밀하게 작성할 수 있게 해둠
                              (= 실행 시점을 세세하게 나눌수 있다는 점이 서비스의 성능과 체감에 영향을 줄 수 있음)

                              ex) useEffect( () => {

                                   (함수 내부 구조1) component rendering 시 실행되는 코드 (필수)
                                   ---------------------------------------------------------------------------------------------------
                                    해당 부분의 코드는 component의 rendering과 연관된 lifeCycle인 'mount(생성)', 'update(rerendering 변경)'와 연관되어, lifecycle hook 함수 componentdidmount(), componentDidUpdate()과 연관됨
                                    (= 해당 component가 mount(생성), update(rerendering으로 인한 수정)시, html rendering이 완료되고 나서! 해당 무명 함수의 내용이 실행됨)
                                       -> rendering이 끝나고 실행된다는 건, 주로 어렵고 복잡한 연산을 수행하거나, 서버에서 데이터를 가져오는 등 수행 시간이 오래걸리거나, 모든게 로딩과 rendering이 끝나고 가장 나중에 처리되어야 할 내용을 useEffect()에서 짬처리를 하게 됨을 의미
                                          (= 함수명을 핵심기능이 아닌 부가기능이라 중요성이 떨어지는 것을 의미하는 side effect에서 따왔음을 짐작가능한 이유를 알 수 있음)

                                       -> 정확히는 아래의 내부구조3에 [state 배열]을 어떻게 적었냐에 따라서, 어떤 state변수의 변경에만 componentDidUpdate()의 구현 타이밍을 통제할 수 있음
                                          (= component 생성 후에 실행되는 componentdidmount()는 무조건 실행됨)
                                   ---------------------------------------------------------------------------------------------------
     
                                   
                                   (함수 내부 구조2) clean up function 영역 = 존재하는 component를 해제(및 새로 갱신)하기 전에 실행되는 코드 (필수 X)
                                   ---------------------------------------------------------------------------------------------------
                                   return () => {

                                    clean up function 내부의 코드는 lifeCycle 중 이미 존재하는 component의 'unmount(삭제)'와 연관되어, lifecycle hook 함수 componentWillUnmount()과 연관됨
                                      -> 정확히는 아래의 내부구조3에 [state 배열]을 어떻게 적었냐에 따라서, state변경에 따른 'update(rerendering 변경)' 상황이 벌어지기 전에도 해당 코드의 작동 여부를 통제할 수 있음
                                         (= 뭔 수를 쓰더라도 완전한 component 해제 전에 실행되는 componentWillUnmount()는 무조건 실행됨...)
                                             -> [] 부분을 아예 배제하거나, [state 배열]을 적으면, 완전한 component 해제가 아닌 component update(갱신) 상황에서도 해당 코드는 작동함
                                                (= component update(갱신)과정에도 component unmount(해제)가 엄밀하게는 포함되기 때문 )

                                      -> clean up function 내부 내용은 보통 수행한 작업들을 정리하고 리소스를 해제하는 불필요한 리소스 사용을 방지하고 메모리 관리에 활용함
                                          ex) timer 제거, socket 연결요청제거, ajax요청 중단 (서버 db에 데이터 요청 중단)

                                      -> clean up function이 update(갱신)와 연관이 되는 이유?
                                          : component의 update(갱신) 상태라는건 component가 다시 rendering 될 때, 기존에 존재하는 component는 unmount(해제)시키고, 갱신된 component를 다시 mount시키는 개념이기 때문

                                   } 
                                   ---------------------------------------------------------------------------------------------------
     
                                  }
     
                                  (함수 내부 구조3) 해당 useEffect()에 유효한 state 변수배열 적기 (필수 X)
                                  ----------------------------------------------------------------------------------------------------
                                  , []   <- (중요!) state 변수를 배열요소로 적음 = 해당 useEffect() 함수는 여기 적힌 state 변수의 변경에만 작동함
                                              -> 해당 parameter는 필수적으로 적는 부분은 아님 

                                                  - []를 비움
                                                     : 모든 state의 변화에 반응하지 않음
                                                       (= mount와 unmount에 1번씩만 useEffect()함수를 작동시킴)
    
                                                  - []부분을 쓰지 않음
                                                     : 모든 state의 변화에 반응함

                                                  - []안에 state변수들을 적음
                                                     : 해당하는 state변수들의 변화에만 useEffect() 함수는 반응하여 작동함
                                                       (= state 변수가 많아지면 개발자의 대갈통이 깨질 수 있음)
                                  ----------------------------------------------------------------------------------------------------
                                  )  


                                 [case1] 만약 useEffect 안의 내용에 대해 'mount(생성)' 후에만 실행을 원한다면?
                                   : useEffect( () => {내용}, [] )
                                      -> 어떤 state가 변화해서 rerendering이 되던 말던, 해당코드를 실행하지 않는다는 것을 의미
                                         (= 최초 1회 component를 mount(생성)할때면 useEffect()의 내용을 실행해라)
                                 
                                 [case2] 만약 useEffect 안의 내용에 대해 update(rerendering으로 인한 수정)를 하더라도 특정 state의 변화에만 변경되게 만들고 싶다면?
                                   : useEffect( () => {내용}, [state변수에 대한 배열요소] )
                                      -> 배열 안에 존재하는 state 요소들의 경우만 변화하여 rerendering이 되는 경우만, 해당코드를 실행하게 함
                                         (= 조건부 componentdidupdate() 실행과 같음)
                                 
                                 [case3] 근데 useEffect() 쓰는데, 만약 무조건 component update(갱신) 전에 실행하고 싶은 코드가 있다면 어떻게 함?
                                   :  useEffect( () => { 내용에 'return () => {내용}' })
                                       -> component의 update로 인한 rerendering 직전이나, component의 unmount시 해당 코드가 실행됨
                                          (정확히는 'return () => {내용}' 부분에 해당하는 부분이 unmount와 연관된 부분으로, 과거 class component 시절 lifecycle hook 계열 함수 중 
                                 
                                 [case4] 그럼 useEffect() 쓰는데, 만약 useEffect() unmount 전에만 실행하고 싶은 코드가 있으면?
                                   : useEffect( () => {return () => {내용} }, [] )
                                     (= 사실상의 componentWillUnmount() 함수 부분을 대체 구현)
                                       -> 비워둔 []   : state 변화에 대해 해당 useEffect()는 작동 X
                                       -> return 코드 : useEffect 본 내용 실행전에 해당 코드 실행
                                 
                                 [case5] 그럼 useEffect() 쓰는데, 특정 component update(갱신) 전에 실행하고 싶은 코드가 있다면 어떻게 함?
                                   : useEffect( () => {return () => {내용} }, [state변수에 대한 배열요소] )
                                     (= 'return 코드를 어떤 state변화에도 반응하지 말라'는 내용의 명령어로 unmount시에만 실행되는 코드를 구현할 수 있음)
                                       -> [state변수에 대한 배열요소]   : 해당 state 변화에 대해서만, 해당 useEffect()는 작동함
                                       -> return 코드                  : useEffect 본 내용 실행전에 해당 코드 실행


 - (중요) class component
   : 원래 react의 component를 작성할때는 객체지향관점에서 class 자료형으로 component를 작성하고 이를 객체화하여 호출함
     (= React class의 Component라는 class를 상속받음) 

    # class component가 도태 된 이유?
       : 더 쓰기 편하면서, 직관적이면서, 코드량도 적은 functional component가 class component가 할수 있는 모든 기능을 가지고 있기 때문
         -> 정확히는 16.8에서 functional component도 state나 여러기능을 쉽게 사용하게 하는 react hook의 등장으로 functional 방식으로 코딩하는게 유리해졌기에 class component는 구식이 됨 

    # class component를 통해 유추가능한 중대한 사실들
       1. (중요) props도 객체지만, state도 원래는 객체
          (= functional component에서 구조분해할당 문법을 통해 생성해 준 개별 state명들은 사실 state객체의 객체 안의 1개의 멤버변수)
             -> 그래서, functional component에서 만든 state에서 hooks문법인 usestate() 안에 제대로 된 자료형을 안 넣으면, 자동으로 그 state는 object 형식으로 지정되는 것... 

       2. setState 함수는 개별적으로 존재하며, 그 목표는 state라는 객체 자신의 멤버변수를 변경하는 것이기에, '멤버명 : 값' 형식으로 parameter를 지정함
          (= functional component에서 구조분해할당 문법을 통해 생성해 준 개별 setState함수들은 사실 일종의 alias(별칭)으로서, 'setState(지정 state멤버변수)'와 비슷하게 치환될 수 있다고 추정 + 내부적으로 작동되는 로직이 있다는걸 유추 가능) 

       3. 조상인 Component class의 render 함수를 해당 component에 맞춰 override함
          (= Component render 기능의 인터페이스화는 이미 class component 시절부터 시작된 전통임)
              -> render 함수는 해당 html DOM요소를 브라우저에서 쉽게 랜더링이 가능하도록 react 차원에서 jsx형식을 우리가 아는 그 형식으로 푸는 함수로 interface화 되어있음

 
 - memo(무명 함수형 컴포넌트 내용)
   : 특정 component가 크고 무겁기에 부모로부터 받은 props 값이 변동되는 것을 제외하고, react의 재랜더링 조건을 회피하고 싶을 떄 사용하는 함수
     (= 조건부로 재랜더링 원칙이 적용된 특수한 component lifeCycle을 가졌다 보자)
        -> memo의 결과값은 let, const, var로 받으며, 그 변수명은 반드시 component명이 되어야 함 

      ex) function MemoChild(){                                              let MemoChild = memo(function (){
            console.log('부모 Conponent인 Cart가 랜더링 되면? );       ->         console.log('부모 Conponent인 Cart가 랜더링 되면? );
            return <div></div>;                                                  return <div></div>;
          }                                                                  })

    # memo(무명 함수형 컴포넌트 내용)의 로직
       : 재랜더링 대상으로 들어간 컴포넌트 내용에 기존 props와 바뀐 props를 비교하는 연산이 추가로 진행되고, 그것이 다르면 재랜더링 진행함
         (= props가 크고 복잡하면 이거 자체로도 부담이 될 수도 있기에, 전가의 보도처럼 지르지 말고, 잘 판단해서 써야함) 


 - (종합) react를 통해 동적인 UI를 만들려면?
  1. class나 function component를 만들어서 html 구조를 만들고, 거기에 맞는 css로 디자인을 확정함
  2. 해당 component UI의 상태를 제어할 flag 변수의 역할을 하는 state선언를 선언함
  3. component 내에서 3항 조건문을 활용하여, 앞서 선언한 flag state에 따라 해당 component를 어떻게 보일지를 작성함
      -> 해당 조건문의 작동의 key가 되는 state변경을 위해서는, react의 이벤트핸들러 속성 + {}를 통해 앞서 선언한 state변수들에 접근하여 이를 조작함

  # (중요) JSX에서 component의 return부분에 HTML영역을 작성시 조건문이 필요하다면?
     1) 반드시! 3항 연산자를 통한 true와 false문을 통한 패턴화로 해결하면 됨
        -> (주의) 조건식에는 state값도 당연히 사용이 가능함 + null을 사용하면 그 자리에 아무것도 출력하지 않을수 있음

     2) JS의 null, undefined, NAN, 0, "" 이 아닌 모든 값을 true로 치환하는 강제형변환을 통해서도 조건문이 구현 가능
        (= '조건문 && 참일시 출력할 HTML영역'은 조건문과 HTML영역이 둘 다 참이면.. 오른쪽에 있는 내용이 자리에 남게 됨)

         ex) { state == null? <p>참이면 보여줄 HTML</p> : null } ==  { state == null && <p>참이면 보여줄 HTML</p> }
        
     3) js의 객체의 유사 array와 비슷한 멤버변수 접근법을 응용해서도 switch문과 같은 조건문 효과를 내서 동적인 경우의 수로 원하는 html 출력 가능

         ex) var 탭UI = { 
               info : <p>상품정보</p>,
               shipping : <p>배송관련</p>,
               refund : <p>환불약관</p>
             }
             
             function Component() {
               var 현재상태 = 'info';
               return (
                 <div>
                   {
                     탭UI[현재상태]     <- HTML 영역값을 가진 멤버변수를 보유한 객체 '탭UI'라는 JS객체를 유사array 인덱스를 통한 접근으로, 현재상태라는 변수에 적힌 값이 일종의 해당되는 객체의 멤버변수명을 호출하는 switch문과 같은 조건문 효과를 내서  <p>상품정보</p> 출력예정
                   }
                 </div>
               )
             } 

  # (중요) JSX에서 반복문이 필요하다면?
     : js 지역 스코프 {}에 js 배열(state배열도 포함)객체의 멤버함수 map()을 이용하고, 배열 안에 component를 담도록 하자 
       (= for 문법은 JSX 안에서 사용할 수 없음)
         -> (참고) map 반복문으로 반복생성한 html 요소들에는 이렇게 반복 생성된 요소들을 구분하기 위한 key 속성을 추가해야 warning이 뜨지 않음 

            ex1) function App (){
                   return (
                     <div>
                       { 
                         글제목.map(function(a){                 <- 첫번째 parameter a = 해당 index순번의 배열요소
                           return (
                           <div className="list" key={i}>
                             <h4>{ a }</h4>
                             <p>2월 18일 발행</p>
                           </div> )
                         }) 
                       }
                     </div>
                   )
                 }

            ex2) function App (){
                   return (
                     <div>
                       { 
                         글제목.map(function(a, i){              <- 두번째 parameter i = 해당 index의 값 그 자체
                           return (
                           <div className="list" key={i}>
                             <h4>{ 글제목[i] }</h4>
                             <p>2월 18일 발행</p>
                           </div> )
                         }) 
                       }
                     </div>
                   )
                 }

  # 만약 반복되는 html요소를 구현하는데 for문이 굳이 쓰고 싶다면?
     : component의 return 부분은 jsx 부분이므로, 그 윗 라인 영역인 js 영역에서 for문을 사용하여, 배열 안에 html요소를 대입한 후 이를 jsx의 conponent return 영역에서 호출

       ex) function App (){
             var 어레이 = [];
             for (var i = 0; i < 3; i++) {
               어레이.push(<div>안녕</div>)         <- 이런식으로 배열에 html요소를 대입
             }
             return (
               <div>
                 { 어레이 }
               </div>
             )
           }