- react 작업물 Github Pages로 배포하기

  1. github.com에 들어가셔서 로그인 후, Repository를 만든다
      -> 나중에 "https://사용자이름.github.io/저장소이름" 으로 url를 입력하면 호스팅 됨

        # 바로 호스팅용으로 만들고 싶으면, 반드시! (중요) '여러분아이디.github.io'라는 이름으로 만들어라
           -> 정확히는 “https://사용자이름.github.io/” 주소로 바로 연결되게 하고 싶을 경우만 사용... 

    1.1 (중요!) (1번을 평범한 저장소 명으로 만들었다면) repository 단위로 멀티 호스팅을 해야하기에, 기본적으로 하위 경로를 가지고 있는 url을 베이스로 사이트를 배포해야 하기에 필요한 설정을 해줌
          -> http://codingapple.com/ 여기에 배포하는 경우엔 따로 설정이 필요없이 대충 해도 되지만,
             http://codingapple.com/blog/ 이런 하위 경로에 배포하고 싶으면 프로젝트에 설정이 따로 필요하다는 말...

        1) package.json 파일 맨 뒤에 ,를 붙여서 homepage라는 항목을 추가한 후, 그 경로를 입력해 주면 됨
        
            ex) "homepage": "https://koelkorea.github.io/githubPagesTest1" or "homepage: "/githubPagesTest1"

        2) (라이브러리 중 react-router를 사용한다면...) 라우터가 제공하는 basename="/하위경로명" 속성을 반드시 시작 컴포넌트인 index.js의 <BrowserRouter> 태그에 추가해야함 
             -> 자세한 내용은 https://create-react-app.dev/docs/deployment/#building-for-relative-paths 참고..
        
            ex) <BrowserRouter basename={process.env.PUBLIC_URL}>  
                  <App>
                <BrowserRouter>

                 - basename
                    : History API를 사용하기 위한, 시작 url을 설정해 주는 BrowserRouter 태그의 속성

                 - process.env.PUBLIC_URL 
                    : create-react-app 을 통해 시작한 프로젝트에서 빌드를 할 시, JS가 index.html의 %PUBLIC_URL%에 올바른 URL을 가져다 대입할 수 있도록 도와주는 일종의 환경변수
                       -> 이를 통해 페이지 호스팅 시작 URL이 root가 아니라던가, 클라이언트 측에서 라우팅을 할 떄에도 프로젝트가 작동하게 도와줌
                          (= 서버없어서 클라이언트 라우팅 쓰는 react router 사용 + root 아닌 repository 기준 url 사용하게 되는 깃허브 페이지에서는 꼭 설정을..)


  2. 작업한 react 작업물을 웹브라우저가 해석할 수 있는 HTML CSS JS 이 세개의 언어로 변경하도록 build 하기 
      : 터미널의 프로젝트 폴더에서 npm run build 입력
        (= 보통은 'npx create-react-app 프로젝트명'을 통해 프로젝트 생성시, package.json의 npm run '명령어'로 특정 명령어를 실행 가능하게 하는 script란에 build라는 명령어에 react-scripts build라는 명령어가 할당되어 있기에 가능)


  3. build 폴더 내의 파일을 전부 만들어 둔 repository에 commit하면 됨
      -> (주의) build 폴더 자체를 commit하면 안됨... (그렇게 하면, 각 폴더가 또 다른 레벨의 하위경로처리가 됨... 문제는 이런경우 하위경로 처리를 또 해줘야함)


  4. (1번을 평범한 저장소 명으로 만들었다면) repository의 네비게이션의 setting 메뉴에 들어가서 Github pages 부분을 클릭 -> 들어간 설정란에서 source 부분을 None이 아니라 main 이런걸로 바꿔주고 저장
       -> https://github.com/koelkorea/repository명/settings 을 통해서도 진입 가능 


  5. 10분 뒤 https://사용자이름.github.io/저장소이름 or https://사용자이름.github.io/저장소이름/html파일명.html 로 진입 go
      -> repository명이 사용자이름.github.io 이면, https://사용자이름.github.io/ 으로 들어가야 함.. (근데 이렇게 하면 사용자이름.github.io의 하위경로를 통한 다중 호스팅 사용이 좀 많이 힘들다는 점에서, 거의 외통수 맞는거라 잘 안함) 

          ex) koelkorea.github.io/githubPageHostingTest2



Q0. 웹서버 가지고 있는데 여기에 배포는 어떻게 합니까?

   "어떤 놈이 메인페이지로 접속하면 /build/index.html 파일 전송해라" 라고 서버 API를 작성하면 간단한 배포가 끝납니다. 
    
Q1. 첫 페이지 로딩 속도를 빠르게 하려면

    원래 리액트, 뷰로 만든 웹앱들은 첫 방문시 필요한 파일을 전부 로드합니다.
    전송되는 파일 사이즈를 조금이라도 줄여서 빠르게 만들고 싶으면 컴포넌트들을 lazy하게 로딩하는 방법을 사용할 수도 있습니다.
    공식 튜토리얼에 있는 lazy 함수 : https://reactjs.org/docs/code-splitting.html#route-based-code-splitting

Q2. 업데이트 사항이 생기면 배포 또 어떻게하죠?

    build 또 하시고 그 파일 그대로 다시 업로드하면 됩니다.
    build 할 때 마다 CSS, JS 파일 명이 무작위로 다시 생성됩니다.
    그래서 새로 배포할 때마다 사이트 방문자들은 새로운 CSS,JS 파일을 이용할 수 있습니다. 

Q3. build 할 때 압축 시키지말고 남기고 싶은 파일은?

    여러분이 ./ 부터 시작하는 경로로 첨부한 이미지, js 파일들은 전부 짜부되고 이름이 변합니다.
    이름이 변하지 않게 하고 싶으면 public 폴더안에 넣으면, build 하고 나서도 그대로 루트경로에 파일이 남아있습니다.
    그리고 개발시 그런 파일들을 이용하고 싶으면 public 폴더에 보관하고 ./ 이게 아닌 / 경로로 import 해오면 됩니다.

Q4. 서버에 올렸는데 왜 접속하면 이상한 페이지가 나오거나 일부 img, css파일이 로드가 안되는 것이죠?

    - build 할 때 에러 안났겠죠 
    - 혹시 하위폴더에 배포한거 아닙니까
    - 배포한 페이지가 안나오면 크롬개발자도구 열어서 index.html이 쓰고있는 css, js, img 파일들의 경로가 제대로 되어있는지 체크해보도록 합시다. 

Q5. 메인페이지 말고 왜 특정 페이지로 접속하면 404 에러가 뜨나요?

    github은 우리가 서버를 만지고 어찌할 수 있는게 아니고 그냥 HTML 파일 올린것만 샤락 보여주는 곳이기 때문... 
    (= 서버를 만들어서 API 개발을 해놓던가.. react-router를 쓰면 된다... URL에 #기호가 붙는 hashRouter or history API를 쓰는 BrowserRouter를 쓸 때 basename 속성을 잘 쓰도록)