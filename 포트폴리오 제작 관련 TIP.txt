- 포트폴리오 만드는 전체 과정에 대한 가이드

0. 포트폴리오 필요 이유

   돈을 받고 코드를 짜고 싶으면 "내가 돈을 주고 코딩을 맡길만한 사람인지" 증명하기 위한 작업물이 필요하기 때문..
   코드의 의미를 생각 않고 따라치는 코드몽키를 선호할리는 없으니 않아서 포트폴리오를 직접 만들어보는 시간이 중요함.


1. 주제고르기
    : 만들고 싶은걸 만들어보는건 베스트, 근데 그게 힘들면 clone이 좋을듯

      만들고 싶었던 것을 만들어보는 것도 동기부여에 있어서 매우 좋지만, 생전 처음 프로그램을 직접 기획해서 만드는 경우 주제와 구성이 어설플 확률이 높음..
      그래서 직접 만든게 고등학생 습작만도 못한 퀄리티가 나올 것 같다면, 다른 실제서비스를 똑같이 흉내내서 만들어보는 것도 좋음
      실제 서비스의 몇몇 페이지와 기능을 그대로 똑같이 만들어보는데 레이아웃과 디자인 바꾸고 재밌는 기능도 몇개 추가해보고 그런 식으로 시작해봅시다.
      
       - 너무 베낀 것 같아보이면 기능은 유지하되 로고, 디자인, 주제를 살짝만 바꾸자
       - 기획한 기능의 양이 많으면 금방 지치기 때문에 꼭 필요한 기능만 먼저 골라놓고 작은거 부터 하나하나 구현
       - 재밌는 아이디어는 구글에 포트폴리오 예시들 검색해보거나 dribbble.com 같은 사이트에 방문해봅시다.
       - 브라우저 Web API들을 이용하면 남들과 달라보이는 재밌는 기능들을 만들 수 있습니다.
       - 아니면 유료지만 요즘은 OpenAI 사이트 가면 GPT 답변을 쉽게 얻을 수 있는 API도 있는데 그런걸로 AI 서비스 만들어봐도 재밌어보입니다.  
       - 공공데이터 API를 가지고 유용한 현실에 도움되는 서비스를 만들어보는 것도 좋습니다.
       - 강의에서 혼자 알아서 코드짜는 법 많이 알려드렸으니 잘 활용해보십시오


2. 내용채우기
    : 기능에 필요없더라도 일부러 전문성과 사용가능 스택을 어필하기 위한 유행하는 라이브러리를 최대한 사용하면 좋음

      포트폴리오는 내가 가진 전문성을 보여주는 역할을 해야하기 때문에 기업 입장에서 많이 찾는 기술들을 강제로 집어넣는게 중요함
      참고로 포트폴리오 안에 쌩자바스크립트 실력 보여주는거에 많은 시간 안쏟아도 됨.. 어차피 바닐라만 가지고 개발 안함

      프론트엔드의 경우 리액트, 리덕스, 타입스크립트, ajax, react-query, next.js 같은 내용을 선호
      만든 서버가 없어서 ajax를 사용할 수 없으면, 따로 .json 파일같은걸 만들어서 어디 올려놓고 그걸 ajax 요청으로 가져와보자

      백엔드의 경우 파일업로드, 회원기능, 라우터, 검색기능, validation기능, 페이지네이션, 에러나 예외사항 처리, 채팅기능, 클라우드배포, SQL, nodejs의 경우 타입스크립트, 스프링 등이 있음
      그런 기능들이 별로 필요없어도 일부러 집어넣는게 중요합니다.


3. 마무리

   - 프론트엔드는 html css 잘 다루는지도 중요하기 때문에 이쁜 레이아웃 디자인과 반응형 레이아웃도 나름 중요합니다.
   - 프론트엔드는 Redux같은거 일부러라도 많이 사용하는 것도 중요합니다.
   - 프론트엔드도 예외상황 처리 잘하면 전문성 있어보일 수 있습니다.
   
   - 코드가 길어지면 코드들을 분리해두는 것도 좋습니다. 비슷한 API끼리 한 파일에 정리해두거나 재사용하는 코드, 긴 코드가 있으면 함수로 빼는 것도 좋습니다.
   
   - 백엔드는 DB 컬렉션이나 테이블을 어떻게 설계해놨는지도 궁금해합니다. 예를 들어 댓글기능을 만들고 싶으면 어떤 DB 컬렉션이나 테이블에 어떻게 데이터를 밀어넣어야 댓글이 1억개여도 가져오기 쉬울까요?
   - 백엔드는 에러나 예외사항에 대해 대처하는 코드도 잘 짜놨는지 확인합시다. 
   - 백엔드는 API들을 요약한 API 문서같은 것도 정리해두면 검토시 보기 좋습니다. 자동생성해주는 라이브러리 있음
   
   - 프론트엔드는 서버와 통신잘한다는걸 어필하는 것도 좋은데 서버가 없으면 Firebase도 좋은 선택입니다.
   - 스터디같은 곳에서 팀프로젝트로 구현해봤으면 내가 어떤 부분을 맡았는지 표기합시다.
   - 프로젝트 대충 제출한다고 면접관들이 로그인하고 실행해보지 않을테니.. 사진과 함께 기능설명 잘 해놓도록 하자
   - git도 혼자할 땐 귀찮지만 사용해봅시다.
   - 자기소개 사이트도 따로 만드는 분들이 있는데, 기특하긴 하지만 구성이 더럽고 디자인이 쓰레기같으면 오히려 단점이라.. 자기소개는 notion 같은 곳에 작성해놓는 것도 좋습니다.


4. 기록
    : 남들 코드 베낀티가 나지 않으려면 여러분이 고민했다는 흔적을 남기는 것도 중요합니다.

      - 내가 만든 프로젝트에 어떤 기능이 있고 어떤 기술을 썼고 어떤 문제가 있었고 어떻게 해결했는지 사진, 코드와 함께 기재해놓는게 좋습니다. 니가 알아서 코드 읽어보라는 식으로 제출하면 아무도 안봄
      - 블로그하나 만들어서 거기에 포트폴리오 만들면서 어려웠던 점, 새로 배웠던 점을 기록해두는 것도 좋습니다. 
      - 사람들 잘 모르는 최신기술 같은 것도 많이 기록해두면 코딩에 관심많고 기특해보입니다.
      - 강의 내용만 베껴서 블로그에 정리해놓는 분들 많은데 그걸로 공부한 척 하는거 보다는 본인이 직접 코드짜면서 대가리 굴린 흔적을 기록해두는게 훨씬 더 좋은 인상을 줍니다.


5. 개발욕구를 자극하기 위한 리액트 사이트 몇가지 보여드리면 

   - 리액트로 만든 테트리스 https://chvin.github.io/react-tetris/ (spacebar, 방향키 이용)
   - 간단한 영화정보 검색기 https://skempin.github.io/reactjs-tmdb-app/
   - 파일 버전관리 툴인 git 문법 배우기 앱 https://learngitbranching.js.org/
   - iOS 스타일 계산기 https://codepen.io/mjijackson/full/xOzyGX
   - 가짜 주식 트레이딩 앱 http://web-demo.adaptivecluster.com/
   - 캘린더 UI http://clauderic.github.io/react-infinite-calendar/
   - 스케치패드 http://svrcekmichal.github.io/react-sketchpad/ 
   - 솔리테르 Solitaire 게임 http://pl12133.github.io/react-solitaire/